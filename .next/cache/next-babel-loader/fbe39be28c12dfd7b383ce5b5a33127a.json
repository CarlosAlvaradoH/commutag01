{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { useQuery } from 'react-query';\nimport { CONTRACT_ADDRESSES, MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { fetchExternalLootBoxData } from 'lib/utils/fetchExternalLootBoxData';\nexport function useEthereumLootBoxQuery(pool) {\n  _s();\n\n  var _pool$prizeStrategy, _pool$prizeStrategy$e, _erc721$tokenIds;\n\n  var _useContext = useContext(AuthControllerContext),\n      chainId = _useContext.chainId,\n      pauseQueries = _useContext.pauseQueries,\n      provider = _useContext.provider;\n\n  var filterAddress = CONTRACT_ADDRESSES[chainId].LootBox;\n  var erc721 = pool === null || pool === void 0 ? void 0 : (_pool$prizeStrategy = pool.prizeStrategy) === null || _pool$prizeStrategy === void 0 ? void 0 : (_pool$prizeStrategy$e = _pool$prizeStrategy.externalErc721Awards) === null || _pool$prizeStrategy$e === void 0 ? void 0 : _pool$prizeStrategy$e.find(function (erc721) {\n    return erc721.address === filterAddress;\n  }); // const { lootBoxAddress, tokenId } = useGraphLootBoxQuery(lootBoxAddress, tokenId)\n\n  var tokenId = erc721 === null || erc721 === void 0 ? void 0 : (_erc721$tokenIds = erc721.tokenIds) === null || _erc721$tokenIds === void 0 ? void 0 : _erc721$tokenIds[0];\n  var enabled = !pauseQueries && chainId && Boolean(filterAddress) && Boolean(tokenId);\n  console.warn(provider, filterAddress, tokenId);\n  return useQuery([QUERY_KEYS.ethereumLootBoxQuery, chainId, filterAddress, tokenId, -1], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchExternalLootBoxData(provider, filterAddress, tokenId);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: enabled,\n    refetchInterval: MAINNET_POLLING_INTERVAL\n  });\n}\n\n_s(useEthereumLootBoxQuery, \"iK6nysCWVzFwqNGlKi6I5toQ/DE=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useEthereumLootBoxQuery.js"],"names":["useContext","useQuery","CONTRACT_ADDRESSES","MAINNET_POLLING_INTERVAL","QUERY_KEYS","AuthControllerContext","fetchExternalLootBoxData","useEthereumLootBoxQuery","pool","chainId","pauseQueries","provider","filterAddress","LootBox","erc721","prizeStrategy","externalErc721Awards","find","address","tokenId","tokenIds","enabled","Boolean","console","warn","ethereumLootBoxQuery","refetchInterval"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SACEC,kBADF,EAEEC,wBAFF,EAGEC,UAHF,QAIO,eAJP;AAKA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,wBAAT,QAAyC,oCAAzC;AAEA,OAAO,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AAAA;;AAAA;;AAAA,oBACAR,UAAU,CAACK,qBAAD,CADV;AAAA,MACpCI,OADoC,eACpCA,OADoC;AAAA,MAC3BC,YAD2B,eAC3BA,YAD2B;AAAA,MACbC,QADa,eACbA,QADa;;AAG5C,MAAMC,aAAa,GAAGV,kBAAkB,CAACO,OAAD,CAAlB,CAA4BI,OAAlD;AACA,MAAMC,MAAM,GAAGN,IAAH,aAAGA,IAAH,8CAAGA,IAAI,CAAEO,aAAT,iFAAG,oBAAqBC,oBAAxB,0DAAG,sBAA2CC,IAA3C,CAAgD,UAAAH,MAAM;AAAA,WAAIA,MAAM,CAACI,OAAP,KAAmBN,aAAvB;AAAA,GAAtD,CAAf,CAJ4C,CAM5C;;AACA,MAAMO,OAAO,GAAGL,MAAH,aAAGA,MAAH,2CAAGA,MAAM,CAAEM,QAAX,qDAAG,iBAAmB,CAAnB,CAAhB;AAEA,MAAMC,OAAO,GAAG,CAACX,YAAD,IACdD,OADc,IAEda,OAAO,CAACV,aAAD,CAFO,IAGdU,OAAO,CAACH,OAAD,CAHT;AAKAI,EAAAA,OAAO,CAACC,IAAR,CAAab,QAAb,EAAuBC,aAAvB,EAAsCO,OAAtC;AACA,SAAOlB,QAAQ,CACb,CAACG,UAAU,CAACqB,oBAAZ,EAAkChB,OAAlC,EAA2CG,aAA3C,EAA0DO,OAA1D,EAAmE,CAAC,CAApE,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkBb,wBAAwB,CAACK,QAAD,EAAWC,aAAX,EAA0BO,OAA1B,CAA1C;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEE,IAAAA,OAAO,EAAPA,OADF;AAEEK,IAAAA,eAAe,EAAEvB;AAFnB,GAHa,CAAf;AAQD;;GAvBeI,uB;UAePN,Q","sourcesContent":["import { useContext } from 'react'\nimport { useQuery } from 'react-query'\n\nimport {\n  CONTRACT_ADDRESSES,\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS,\n} from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { fetchExternalLootBoxData } from 'lib/utils/fetchExternalLootBoxData'\n\nexport function useEthereumLootBoxQuery(pool) {\n  const { chainId, pauseQueries, provider } = useContext(AuthControllerContext)\n\n  const filterAddress = CONTRACT_ADDRESSES[chainId].LootBox\n  const erc721 = pool?.prizeStrategy?.externalErc721Awards?.find(erc721 => erc721.address === filterAddress)\n\n  // const { lootBoxAddress, tokenId } = useGraphLootBoxQuery(lootBoxAddress, tokenId)\n  const tokenId = erc721?.tokenIds?.[0]\n\n  const enabled = !pauseQueries &&\n    chainId &&\n    Boolean(filterAddress) &&\n    Boolean(tokenId)\n\n  console.warn(provider, filterAddress, tokenId)\n  return useQuery(\n    [QUERY_KEYS.ethereumLootBoxQuery, chainId, filterAddress, tokenId, -1],\n    async () => await fetchExternalLootBoxData(provider, filterAddress, tokenId),\n    {\n      enabled,\n      refetchInterval: MAINNET_POLLING_INTERVAL\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}