{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { useAtom } from 'jotai';\nimport { ethers } from 'ethers';\nimport IERC20Abi from '@pooltogether/pooltogether-contracts/abis/IERC20';\nimport { useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { Button } from 'lib/components/Button';\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction';\nimport { usersDataForPool } from 'lib/utils/usersDataForPool';\nexport function RevokePoolAllowanceTxButton(props) {\n  const {\n    t\n  } = useTranslation();\n  const [transactions, setTransactions] = useAtom(transactionsAtom);\n  const {\n    provider,\n    usersAddress\n  } = useContext(AuthControllerContext);\n  const {\n    pool,\n    usersChainData\n  } = useContext(PoolDataContext);\n  const {\n    usersTokenAllowance\n  } = usersDataForPool(pool, usersChainData);\n  const poolAddress = pool === null || pool === void 0 ? void 0 : pool.poolAddress;\n  const tokenAddress = pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralToken;\n  const ticker = pool && pool.underlyingCollateralSymbol;\n  const tickerUpcased = ticker && ticker.toUpperCase();\n  const {\n    0: txId,\n    1: setTxId\n  } = useState();\n  const txName = t(`revokePoolAllowance`, {\n    ticker: tickerUpcased\n  });\n  const method = 'approve';\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions);\n  const tx = transactions === null || transactions === void 0 ? void 0 : transactions.find(tx => tx.id === txId);\n\n  if (usersTokenAllowance.eq(0)) {\n    return null;\n  }\n\n  const handleRevokeAllowanceClick = async e => {\n    e.preventDefault();\n    const params = [poolAddress, ethers.utils.parseEther('0') // {\n    //   gasLimit: 200000\n    // }\n    ];\n    const id = sendTx(t, provider, usersAddress, IERC20Abi, tokenAddress, method, params);\n    setTxId(id);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"m-2\"\n  }, __jsx(Button, {\n    secondary: true,\n    onClick: handleRevokeAllowanceClick,\n    disabled: (tx === null || tx === void 0 ? void 0 : tx.sent) && !(tx === null || tx === void 0 ? void 0 : tx.completed)\n  }, t('revokePoolAllowance', {\n    ticker: pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralSymbol\n  }))));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/RevokePoolAllowanceTxButton.jsx"],"names":["React","useContext","useState","useAtom","ethers","IERC20Abi","useTranslation","AuthControllerContext","PoolDataContext","transactionsAtom","Button","useSendTransaction","usersDataForPool","RevokePoolAllowanceTxButton","props","t","transactions","setTransactions","provider","usersAddress","pool","usersChainData","usersTokenAllowance","poolAddress","tokenAddress","underlyingCollateralToken","ticker","underlyingCollateralSymbol","tickerUpcased","toUpperCase","txId","setTxId","txName","method","sendTx","tx","find","id","eq","handleRevokeAllowanceClick","e","preventDefault","params","utils","parseEther","sent","completed"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { useAtom } from 'jotai'\nimport { ethers } from 'ethers'\n\nimport IERC20Abi from '@pooltogether/pooltogether-contracts/abis/IERC20'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { Button } from 'lib/components/Button'\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction'\nimport { usersDataForPool } from 'lib/utils/usersDataForPool'\n\nexport function RevokePoolAllowanceTxButton(props) {\n  const { t } = useTranslation()\n\n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n\n  const { provider, usersAddress } = useContext(AuthControllerContext)\n  const { pool, usersChainData } = useContext(PoolDataContext)\n\n  const {\n    usersTokenAllowance,\n  } = usersDataForPool(pool, usersChainData)\n  \n  const poolAddress = pool?.poolAddress\n  const tokenAddress = pool?.underlyingCollateralToken\n\n  const ticker = pool && pool.underlyingCollateralSymbol\n  const tickerUpcased = ticker && ticker.toUpperCase()\n\n\n  const [txId, setTxId] = useState()\n\n  const txName = t(`revokePoolAllowance`, { ticker: tickerUpcased })\n  const method = 'approve'\n\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions)\n\n  \n  \n  const tx = transactions?.find((tx) => tx.id === txId)\n\n  if (usersTokenAllowance.eq(0)) {\n    return null\n  }\n\n  const handleRevokeAllowanceClick = async (e) => {\n    e.preventDefault()\n\n    const params = [\n      poolAddress,\n      ethers.utils.parseEther('0'),\n      // {\n      //   gasLimit: 200000\n      // }\n    ]\n\n    const id = sendTx(\n      t,\n      provider,\n      usersAddress,\n      IERC20Abi,\n      tokenAddress,\n      method,\n      params,\n    )\n\n    setTxId(id)\n  }\n\n  return <>\n    <div className='m-2'>\n      <Button\n        secondary\n        onClick={handleRevokeAllowanceClick}\n        disabled={tx?.sent && !tx?.completed}\n      >\n        {t('revokePoolAllowance', {\n          ticker: pool?.underlyingCollateralSymbol\n        })}\n      </Button>\n    </div>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}