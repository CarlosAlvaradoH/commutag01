{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState } from 'react';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport classnames from 'classnames';\nimport { useAtom } from 'jotai';\nimport { ethers } from 'ethers';\nimport { isEmpty, map, find, defaultTo, sum } from 'lodash';\nimport ComptrollerAbi from '@pooltogether/pooltogether-contracts/abis/Comptroller';\nimport { useTranslation } from 'lib/../i18n';\nimport { DEFAULT_TOKEN_PRECISION } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { EtherscanTxLink } from 'lib/components/EtherscanTxLink';\nimport { PoolCurrencyIcon } from 'lib/components/PoolCurrencyIcon';\nimport { PoolNumber } from 'lib/components/PoolNumber';\nimport { PoolCountUp } from 'lib/components/PoolCountUp';\nimport { PTCopyToClipboard } from 'lib/components/PTCopyToClipboard';\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction';\nimport { extractPoolRewardsFromUserDrips } from 'lib/utils/extractPoolRewardsFromUserDrips';\nimport { numberWithCommas } from 'lib/utils/numberWithCommas';\nimport { shorten } from 'lib/utils/shorten';\nimport PrizeIllustration from 'assets/images/prize-illustration-new@2x.png';\nexport const AccountRewards = () => {\n  const {\n    t\n  } = useTranslation();\n  const [transactions, setTransactions] = useAtom(transactionsAtom);\n  const {\n    pools,\n    dynamicPlayerDrips,\n    usersChainData,\n    graphDripData\n  } = useContext(PoolDataContext);\n  const {\n    usersAddress,\n    provider\n  } = useContext(AuthControllerContext);\n  const poolAddresses = map(pools, 'poolAddress');\n  const playerRewards = extractPoolRewardsFromUserDrips({\n    poolAddresses,\n    dynamicPlayerDrips\n  });\n  let domain = '';\n\n  if (window && window.location) {\n    domain = `${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}`;\n  }\n\n  const referralAddress = `https://${domain}/?referrer=${usersAddress ? usersAddress : ''}`;\n  const shortReferralAddress = `${domain}/?referrer=${usersAddress ? shorten(usersAddress) : ''}`;\n  const {\n    usersDripTokenData\n  } = usersChainData || {};\n  const {\n    0: activeTxDripIds,\n    1: setActiveTxDripIds\n  } = useState([]);\n  const {\n    0: txId,\n    1: setTxId\n  } = useState(0);\n  const txName = t(`claimRewards`);\n  const method = 'updateAndClaimDrips';\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions);\n  const txInFlight = transactions === null || transactions === void 0 ? void 0 : transactions.find(tx => tx.id === txId); // const txsNotCompleted = transactions\n  //   ?.filter(t => !t.completed && !t.cancelled)\n  // useEffect(() => {\n  //   // this is a heavy-handed reset of active tx rows and should be improved but will require \n  //   // putting params/identifying data into the tx object\n  //   console.log(txsNotCompleted)\n  //   if (activeTxDripIds.length > 0 && txsNotCompleted && txsNotCompleted.length === 0) {\n  //     console.log('resetting!')\n  //     setActiveTxDripIds([])\n  //   }\n  // }, [txsNotCompleted])\n\n  const handleClaim = drip => {\n    const {\n      comptroller,\n      updatePairs,\n      dripTokens\n    } = getParamsForClaim([drip.id]);\n    const params = [updatePairs, usersAddress, dripTokens // {\n    //   gasLimit: 500000\n    // }\n    ];\n    const id = sendTx(t, provider, usersAddress, ComptrollerAbi, comptroller, method, params);\n    setTxId(id);\n  };\n\n  const getParamsForClaim = (drips = []) => {\n    const updatePairs = [];\n    const dripTokens = [];\n    let comptroller;\n\n    for (let i = 0; i < drips.length; i++) {\n      let drip = graphDripData.balanceDrips.find(drip => drip.dripToken.toLowerCase() === drips[i].toLowerCase());\n\n      if (!drip) {\n        drip = graphDripData.volumeDrips.find(drip => drip.dripToken.toLowerCase() === drips[i].toLowerCase());\n      }\n\n      let [comptrollerAddress, sourceAddress, measureTokenAddress, dripTokenAddress, isReferral, playerAddress] = drip.id.split('-');\n      isReferral = Boolean(parseInt(isReferral, 10));\n      updatePairs.push({\n        source: sourceAddress,\n        measure: measureTokenAddress\n      });\n      dripTokens.push(dripTokenAddress);\n      comptroller = comptroller || comptrollerAddress;\n    }\n\n    return {\n      comptroller,\n      updatePairs,\n      dripTokens\n    };\n  };\n\n  const getFormattedNumber = (value, decimals) => {\n    const formatted = ethers.utils.formatUnits(value, decimals || DEFAULT_TOKEN_PRECISION);\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"font-bold text-flashy\"\n    }, __jsx(PoolCountUp, {\n      duration: 14,\n      fontSansRegular: true,\n      end: Number.parseFloat(formatted),\n      decimals: 8\n    })));\n  };\n\n  const getDripDataByAddress = (dripTokenAddress, dripTokenData) => {\n    const {\n      usersDripTokenData\n    } = usersChainData;\n    const dripTokens = (playerRewards === null || playerRewards === void 0 ? void 0 : playerRewards.allDrips) || [];\n    const zero = ethers.utils.parseEther('0');\n    const dripData = defaultTo(find(dripTokens, d => d.dripToken.address === dripTokenAddress), {\n      id: dripTokenAddress,\n      dripToken: _objectSpread({\n        address: dripTokenAddress\n      }, dripTokenData),\n      claimable: zero,\n      balance: zero\n    });\n    dripData.claimable = usersDripTokenData ? usersDripTokenData[dripTokenAddress].claimable : zero;\n    dripData.balance = usersDripTokenData ? usersDripTokenData[dripTokenAddress].balance : zero;\n    return dripData;\n  };\n\n  const getClaimButton = dripData => {\n    let disabled;\n\n    if (!dripData.claimable.gt(0)) {\n      disabled = true;\n    } // TODO: Handle multiple claims at once\n\n\n    if (txInFlight && !txInFlight.completed && activeTxDripIds.includes(dripData.id)) {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"flex flex-col sm:flex-row items-center justify-end\"\n      }, __jsx(\"span\", {\n        className: \"order-1 sm:order-2\"\n      }, __jsx(ClipLoader, {\n        size: 14,\n        color: '#049c9c'\n      }), __jsx(\"span\", {\n        className: \"text-teal font-bold ml-2 mt-1\"\n      }, t('claiming'))), __jsx(\"span\", {\n        className: \"order-2 sm:order-1\"\n      }, !isEmpty(txInFlight.hash) && __jsx(React.Fragment, null, __jsx(EtherscanTxLink, {\n        chainId: txInFlight.ethersTx.chainId,\n        hash: txInFlight.hash,\n        className: \"text-xxxs text-teal sm:mr-3\"\n      }, \"Etherscan\")))));\n    }\n\n    return __jsx(React.Fragment, null, __jsx(\"a\", {\n      className: classnames('underline cursor-pointer stroke-current font-bold', {\n        'cursor-not-allowed opacity-20': disabled\n      }),\n      onClick: e => {\n        e.preventDefault();\n\n        if (disabled) {\n          return;\n        }\n\n        setActiveTxDripIds([...activeTxDripIds, dripData.id]);\n        handleClaim(dripData);\n      }\n    }, t('claim')));\n  };\n\n  const getRewardsDripRows = () => {\n    return map(usersDripTokenData, (dripTokenData, dripTokenAddress) => {\n      var _pools$, _pools$2;\n\n      const dripData = getDripDataByAddress(dripTokenAddress, dripTokenData);\n      const isPoolDaiTickets = dripTokenData.name === 'PoolTogether Dai Ticket (Compound)' || dripTokenData.name === 'DAI Ticket'; // this is using the only pool in the array, but if we wanted to do this properly\n      // we would first iterate by pool and use the current rewards for that pool to do the calculation\n\n      const daiPoolTickets = parseFloat(ethers.utils.formatUnits(pools === null || pools === void 0 ? void 0 : (_pools$ = pools[0]) === null || _pools$ === void 0 ? void 0 : _pools$.ticketSupply, pools === null || pools === void 0 ? void 0 : (_pools$2 = pools[0]) === null || _pools$2 === void 0 ? void 0 : _pools$2.underlyingCollateralDecimals));\n      const apr = numberWithCommas(1000 * 52 / daiPoolTickets * 100);\n      return __jsx(React.Fragment, null, __jsx(\"tr\", {\n        key: dripData.id\n      }, __jsx(\"td\", {\n        className: \"px-2 sm:px-3 py-2 text-left font-bold\"\n      }, isPoolDaiTickets && __jsx(React.Fragment, null, __jsx(PoolCurrencyIcon, {\n        sm: true,\n        pool: {\n          underlyingCollateralSymbol: 'dai'\n        }\n      })), \" \", isPoolDaiTickets ? t('daiTickets') : dripData.dripToken.name), __jsx(\"td\", {\n        className: \"px-2 sm:px-3 py-2 text-left opacity-60\"\n      }, apr, \"% APR\"), __jsx(\"td\", {\n        className: \"px-2 sm:px-3 py-2 text-left\"\n      }, getFormattedNumber(dripData.claimable, dripData.dripToken.decimals)), __jsx(\"td\", {\n        className: \"px-2 sm:px-3 py-2 text-right\"\n      }, getClaimButton(dripData))));\n    });\n  };\n\n  const getTotalRewards = () => {\n    const amounts = map(usersDripTokenData, (dripTokenData, dripTokenAddress) => {\n      const dripData = getDripDataByAddress(dripTokenAddress, dripTokenData);\n      return parseFloat(ethers.utils.formatUnits(dripData.claimable, dripData.dripToken.decimals));\n    });\n    return sum(amounts);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"h5\", {\n    className: \"font-normal text-accent-2 mt-12 mb-4\"\n  }, t('myRewards')), __jsx(\"div\", {\n    className: \"xs:mt-3 bg-accent-grey-4 rounded-lg xs:mx-0 px-2 sm:px-6 py-3\"\n  }, __jsx(\"div\", {\n    className: \"flex justify-between flex-col xs:flex-row xs:pt-4 pb-0 px-2 xs:px-4\"\n  }, __jsx(\"div\", {\n    className: \"flex-col order-2 xs:order-1\"\n  }, __jsx(\"h6\", {\n    className: \"flex items-center font-normal\"\n  }, t('totalRewards')), __jsx(\"h3\", null, __jsx(PoolNumber, null, numberWithCommas(getTotalRewards(), {\n    precision: 6\n  }))), __jsx(\"div\", {\n    className: \"opacity-60\"\n  }, \"$\", numberWithCommas(getTotalRewards(), {\n    precision: 6\n  }))), __jsx(\"div\", {\n    className: \"order-1 xs:order-2 ml-auto\"\n  }, __jsx(\"img\", {\n    src: PrizeIllustration,\n    className: \"w-32 mx-auto\"\n  }))), __jsx(\"div\", {\n    className: \"text-inverse flex flex-col justify-between xs:px-2\"\n  }, __jsx(\"table\", {\n    className: \"table-fixed w-full text-xxs xs:text-base mt-6\"\n  }, __jsx(\"tbody\", null, getRewardsDripRows())))), __jsx(\"div\", {\n    className: \"flex flex-col sm:flex-row items-center justify-between bg-accent-grey-4 px-4 sm:px-10 py-4 text-inverse rounded-lg mt-4\"\n  }, __jsx(\"div\", {\n    className: \"flex-grow sm:w-4/12 lg:w-1/2 sm:mr-3 text-xxs sm:text-xs pb-2 sm:pb-0\"\n  }, t('inviteFriendsAndEarnReferralRewards')), __jsx(PTCopyToClipboard, {\n    text: referralAddress,\n    textShort: shortReferralAddress\n  })));\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/AccountRewards.jsx"],"names":["React","useContext","useState","ClipLoader","classnames","useAtom","ethers","isEmpty","map","find","defaultTo","sum","ComptrollerAbi","useTranslation","DEFAULT_TOKEN_PRECISION","AuthControllerContext","PoolDataContext","transactionsAtom","EtherscanTxLink","PoolCurrencyIcon","PoolNumber","PoolCountUp","PTCopyToClipboard","useSendTransaction","extractPoolRewardsFromUserDrips","numberWithCommas","shorten","PrizeIllustration","AccountRewards","t","transactions","setTransactions","pools","dynamicPlayerDrips","usersChainData","graphDripData","usersAddress","provider","poolAddresses","playerRewards","domain","window","location","hostname","port","referralAddress","shortReferralAddress","usersDripTokenData","activeTxDripIds","setActiveTxDripIds","txId","setTxId","txName","method","sendTx","txInFlight","tx","id","handleClaim","drip","comptroller","updatePairs","dripTokens","getParamsForClaim","params","drips","i","length","balanceDrips","dripToken","toLowerCase","volumeDrips","comptrollerAddress","sourceAddress","measureTokenAddress","dripTokenAddress","isReferral","playerAddress","split","Boolean","parseInt","push","source","measure","getFormattedNumber","value","decimals","formatted","utils","formatUnits","Number","parseFloat","getDripDataByAddress","dripTokenData","allDrips","zero","parseEther","dripData","d","address","claimable","balance","getClaimButton","disabled","gt","completed","includes","hash","ethersTx","chainId","e","preventDefault","getRewardsDripRows","isPoolDaiTickets","name","daiPoolTickets","ticketSupply","underlyingCollateralDecimals","apr","underlyingCollateralSymbol","getTotalRewards","amounts","precision"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport ClipLoader from 'react-spinners/ClipLoader'\nimport classnames from 'classnames'\nimport { useAtom } from 'jotai'\nimport { ethers } from 'ethers'\nimport { isEmpty, map, find, defaultTo, sum } from 'lodash'\n\nimport ComptrollerAbi from '@pooltogether/pooltogether-contracts/abis/Comptroller'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { DEFAULT_TOKEN_PRECISION } from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { EtherscanTxLink } from 'lib/components/EtherscanTxLink'\nimport { PoolCurrencyIcon } from 'lib/components/PoolCurrencyIcon'\nimport { PoolNumber } from 'lib/components/PoolNumber'\nimport { PoolCountUp } from 'lib/components/PoolCountUp'\nimport { PTCopyToClipboard } from 'lib/components/PTCopyToClipboard'\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction'\nimport { extractPoolRewardsFromUserDrips } from 'lib/utils/extractPoolRewardsFromUserDrips'\nimport { numberWithCommas } from 'lib/utils/numberWithCommas'\nimport { shorten } from 'lib/utils/shorten'\n\nimport PrizeIllustration from 'assets/images/prize-illustration-new@2x.png'\n\nexport const AccountRewards = () => {\n  const { t } = useTranslation()\n\n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n  \n  const { pools, dynamicPlayerDrips, usersChainData, graphDripData } = useContext(PoolDataContext)\n  const { usersAddress, provider } = useContext(AuthControllerContext)\n\n  const poolAddresses = map(pools, 'poolAddress')\n  const playerRewards = extractPoolRewardsFromUserDrips({poolAddresses, dynamicPlayerDrips})\n\n  let domain = ''\n  if (window && window.location) {\n    domain = `${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}`\n  }\n  const referralAddress = `https://${domain}/?referrer=${usersAddress ? usersAddress : ''}`\n  const shortReferralAddress = `${domain}/?referrer=${usersAddress ? shorten(usersAddress) : ''}`\n\n  const { usersDripTokenData } = usersChainData || {}\n\n  const [activeTxDripIds, setActiveTxDripIds] = useState([])\n\n  const [txId, setTxId] = useState(0)\n\n  const txName = t(`claimRewards`)\n  const method = 'updateAndClaimDrips'\n\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions)\n\n  \n  \n  const txInFlight = transactions?.find((tx) => tx.id === txId)\n\n  // const txsNotCompleted = transactions\n  //   ?.filter(t => !t.completed && !t.cancelled)\n  // useEffect(() => {\n  //   // this is a heavy-handed reset of active tx rows and should be improved but will require \n  //   // putting params/identifying data into the tx object\n  //   console.log(txsNotCompleted)\n  //   if (activeTxDripIds.length > 0 && txsNotCompleted && txsNotCompleted.length === 0) {\n  //     console.log('resetting!')\n  //     setActiveTxDripIds([])\n  //   }\n  // }, [txsNotCompleted])\n\n  const handleClaim = (drip) => {\n    const { comptroller, updatePairs, dripTokens } = getParamsForClaim([drip.id])\n\n    const params = [\n      updatePairs,\n      usersAddress,\n      dripTokens,\n      // {\n      //   gasLimit: 500000\n      // }\n    ]\n\n    const id = sendTx(\n      t,\n      provider,\n      usersAddress,\n      ComptrollerAbi,\n      comptroller,\n      method,\n      params,\n    )\n    setTxId(id)\n  }\n\n  const getParamsForClaim = (drips = []) => {\n    const updatePairs = []\n    const dripTokens = []\n    let comptroller\n\n    for (let i = 0; i < drips.length; i++) {\n      let drip = graphDripData.balanceDrips.find(drip => drip.dripToken.toLowerCase() === drips[i].toLowerCase())\n      if (!drip) {\n        drip = graphDripData.volumeDrips.find(drip => drip.dripToken.toLowerCase() === drips[i].toLowerCase())\n      }\n\n      let [\n        comptrollerAddress,\n        sourceAddress,\n        measureTokenAddress,\n        dripTokenAddress,\n        isReferral,\n        playerAddress\n      ] = drip.id.split('-')\n\n      isReferral = Boolean(parseInt(isReferral, 10))\n\n      updatePairs.push({\n        source: sourceAddress,\n        measure: measureTokenAddress,\n      })\n      dripTokens.push(dripTokenAddress)\n      comptroller = comptroller || comptrollerAddress\n    }\n\n    return {comptroller, updatePairs, dripTokens}\n  }\n\n  const getFormattedNumber = (value, decimals) => {\n    const formatted = ethers.utils.formatUnits(\n      value,\n      decimals || DEFAULT_TOKEN_PRECISION\n    )\n\n    return <>\n      <div className='font-bold text-flashy'>\n        <PoolCountUp\n          duration={14}\n          fontSansRegular\n          end={Number.parseFloat(formatted)}\n          decimals={8}\n        />\n        {/* <PoolNumber>\n          {numberWithCommas(formatted, { precision: 6 })}\n        </PoolNumber> */}\n      </div>\n    </>\n  }\n\n  const getDripDataByAddress = (dripTokenAddress, dripTokenData) => {\n    const { usersDripTokenData } = usersChainData\n    const dripTokens = playerRewards?.allDrips || []\n\n    const zero = ethers.utils.parseEther('0')\n\n    const dripData = defaultTo(find(dripTokens, d => d.dripToken.address === dripTokenAddress), {\n      id: dripTokenAddress,\n      dripToken: {\n        address: dripTokenAddress,\n        ...dripTokenData\n      },\n      claimable: zero,\n      balance: zero\n    })\n\n    dripData.claimable = usersDripTokenData ? usersDripTokenData[dripTokenAddress].claimable : zero\n    dripData.balance = usersDripTokenData ? usersDripTokenData[dripTokenAddress].balance : zero\n\n    return dripData\n  }\n\n  const getClaimButton = (dripData) => {\n    let disabled\n    if (!(dripData.claimable.gt(0))) {\n      disabled = true\n    }\n\n    // TODO: Handle multiple claims at once\n    if (txInFlight && !txInFlight.completed && activeTxDripIds.includes(dripData.id)) {\n      return <>\n        <div\n          className='flex flex-col sm:flex-row items-center justify-end'\n        >\n          <span\n            className='order-1 sm:order-2'\n          >\n            <ClipLoader\n              size={14}\n              color={'#049c9c'}\n            />\n            <span className='text-teal font-bold ml-2 mt-1'>{t('claiming')}</span>\n          </span>\n\n          <span\n            className='order-2 sm:order-1'\n          >\n            {!isEmpty(txInFlight.hash) && <>\n              <EtherscanTxLink\n                chainId={txInFlight.ethersTx.chainId}\n                hash={txInFlight.hash}\n                className='text-xxxs text-teal sm:mr-3'\n              >\n                Etherscan\n              </EtherscanTxLink>\n            </>}\n          </span>\n        </div>\n      </>\n    }\n\n    return <>\n      <a\n        className={classnames(\n          'underline cursor-pointer stroke-current font-bold',\n          {\n            'cursor-not-allowed opacity-20': disabled\n          }\n        )}\n        onClick={(e) => {\n          e.preventDefault()\n\n          if (disabled) {\n            return\n          }\n\n          setActiveTxDripIds([...activeTxDripIds, dripData.id])\n\n          handleClaim(dripData)\n        }}\n      >\n        {t('claim')}\n      </a>\n    </>\n  }\n\n  const getRewardsDripRows = () => {\n    return map(usersDripTokenData, (dripTokenData, dripTokenAddress) => {\n      const dripData = getDripDataByAddress(dripTokenAddress, dripTokenData)\n\n      const isPoolDaiTickets = dripTokenData.name === 'PoolTogether Dai Ticket (Compound)'\n        || dripTokenData.name === 'DAI Ticket'\n\n      // this is using the only pool in the array, but if we wanted to do this properly\n      // we would first iterate by pool and use the current rewards for that pool to do the calculation\n      const daiPoolTickets = parseFloat(ethers.utils.formatUnits(pools?.[0]?.ticketSupply, pools?.[0]?.underlyingCollateralDecimals))\n      const apr = numberWithCommas(((1000 * 52) / daiPoolTickets) * 100)\n\n      return <>\n        <tr key={dripData.id}>\n          <td className='px-2 sm:px-3 py-2 text-left font-bold'>\n            {isPoolDaiTickets && <>\n              <PoolCurrencyIcon\n                sm\n                pool={{ underlyingCollateralSymbol: 'dai' }}\n              />\n            </>} {isPoolDaiTickets ? t('daiTickets') : dripData.dripToken.name}\n          </td>\n          <td className='px-2 sm:px-3 py-2 text-left opacity-60'>\n            {apr}% APR\n          </td>\n          <td className='px-2 sm:px-3 py-2 text-left'>\n            {getFormattedNumber(dripData.claimable, dripData.dripToken.decimals)}\n          </td>\n          <td className='px-2 sm:px-3 py-2 text-right'>\n            {getClaimButton(dripData)}\n          </td>\n        </tr>\n      </>\n    })\n  }\n \n  const getTotalRewards = () => {\n    const amounts = map(usersDripTokenData, (dripTokenData, dripTokenAddress) => {\n      const dripData = getDripDataByAddress(dripTokenAddress, dripTokenData)\n\n      return parseFloat(\n        ethers.utils.formatUnits(\n          dripData.claimable,\n          dripData.dripToken.decimals\n        )\n      )\n    })\n\n    return sum(amounts)\n  }\n\n  return <>\n    <h5\n      className='font-normal text-accent-2 mt-12 mb-4'\n    >\n      {t('myRewards')}\n    </h5>\n\n    <div\n      className='xs:mt-3 bg-accent-grey-4 rounded-lg xs:mx-0 px-2 sm:px-6 py-3'\n    >\n      <div className='flex justify-between flex-col xs:flex-row xs:pt-4 pb-0 px-2 xs:px-4'>\n\n        <div className='flex-col order-2 xs:order-1'>\n          <h6\n            className='flex items-center font-normal'\n          >\n            {t('totalRewards')}\n          </h6>\n\n          <h3>\n            <PoolNumber>\n              {numberWithCommas(getTotalRewards(), { precision: 6 })}\n            </PoolNumber>\n          </h3>\n          <div\n            className='opacity-60'\n          >\n            ${numberWithCommas(getTotalRewards(), { precision: 6 })}\n          </div>\n        </div>\n\n        <div\n          className='order-1 xs:order-2 ml-auto'\n        >\n          <img\n            src={PrizeIllustration}\n            className='w-32 mx-auto'\n          />\n        </div>\n      </div>\n\n      <div\n        className='text-inverse flex flex-col justify-between xs:px-2'\n      >\n        <table\n          className='table-fixed w-full text-xxs xs:text-base mt-6'\n        >\n          <tbody>\n            {getRewardsDripRows()}\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <div\n      className='flex flex-col sm:flex-row items-center justify-between bg-accent-grey-4 px-4 sm:px-10 py-4 text-inverse rounded-lg mt-4'\n    >\n      <div className='flex-grow sm:w-4/12 lg:w-1/2 sm:mr-3 text-xxs sm:text-xs pb-2 sm:pb-0'>\n        {t('inviteFriendsAndEarnReferralRewards')}\n      </div>\n\n      <PTCopyToClipboard\n        text={referralAddress}\n        textShort={shortReferralAddress}\n      />\n    </div>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}