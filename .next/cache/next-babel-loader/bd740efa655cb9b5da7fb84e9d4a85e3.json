{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { ethers } from 'ethers';\nimport { sub, fromUnixTime } from 'date-fns';\nimport { compact } from 'lodash';\nimport { DEFAULT_TOKEN_PRECISION } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { DateValueLineGraph } from 'lib/components/DateValueLineGraph';\nimport { usePoolPrizesQuery } from 'lib/hooks/usePoolPrizesQuery';\nvar NUMBER_OF_POINTS = 10;\nexport var TicketsSoldGraph = function TicketsSoldGraph(props) {\n  _s();\n\n  var _data$prizePool;\n\n  var pool = props.pool;\n\n  var _useContext = useContext(AuthControllerContext),\n      chainId = _useContext.chainId,\n      pauseQueries = _useContext.pauseQueries;\n\n  var first = NUMBER_OF_POINTS;\n\n  var _usePoolPrizesQuery = usePoolPrizesQuery(pauseQueries, chainId, pool, first),\n      status = _usePoolPrizesQuery.status,\n      data = _usePoolPrizesQuery.data,\n      error = _usePoolPrizesQuery.error,\n      isFetching = _usePoolPrizesQuery.isFetching;\n\n  var prizes = compact([].concat(data === null || data === void 0 ? void 0 : (_data$prizePool = data.prizePool) === null || _data$prizePool === void 0 ? void 0 : _data$prizePool.prizes));\n\n  if (error) {\n    console.error(error);\n  }\n\n  var decimals = pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralDecimals;\n\n  if (!decimals || !prizes.length || isFetching) {\n    return null;\n  }\n\n  var lastPrize = prizes[0];\n  var currentPrize; // If we have a prize amount then we know the last prize has been rewarded\n\n  if (lastPrize === null || lastPrize === void 0 ? void 0 : lastPrize.awardedBlock) {\n    // unsure why we need to divide by 1000 here when we do it again\n    // when compiling the array ...\n    currentPrize = {\n      ticketSupply: pool.ticketSupply,\n      awardedTimestamp: Date.now() / 1000\n    };\n    prizes.unshift(currentPrize);\n  }\n\n  var dataArray = prizes.map(function (prize) {\n    if (!prize) {\n      console.warn('why no prize here?', prize);\n    }\n\n    var tickets = (prize === null || prize === void 0 ? void 0 : prize.awardedBlock) ? prize === null || prize === void 0 ? void 0 : prize.totalTicketSupply : prize === null || prize === void 0 ? void 0 : prize.ticketSupply;\n    var ticketsSold = ethers.utils.formatUnits(tickets || '0', decimals || DEFAULT_TOKEN_PRECISION);\n    return {\n      value: parseInt(ticketsSold, 10),\n      date: fromUnixTime(prize.awardedTimestamp)\n    };\n  });\n\n  if (dataArray.length < NUMBER_OF_POINTS) {\n    dataArray.push({\n      value: 0,\n      date: sub(dataArray[dataArray.length - 1].date, {\n        years: 0,\n        months: 0,\n        weeks: 1,\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      })\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(DateValueLineGraph, {\n    id: \"tickets-sold-graph\",\n    valueLabel: \"Tickets\",\n    data: [dataArray]\n  }));\n};\n\n_s(TicketsSoldGraph, \"InGGaeCL5cHP8nANwD+WZvYOmKY=\", false, function () {\n  return [usePoolPrizesQuery];\n});\n\n_c = TicketsSoldGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicketsSoldGraph\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/TicketsSoldGraph.jsx"],"names":["React","useContext","ethers","sub","fromUnixTime","compact","DEFAULT_TOKEN_PRECISION","AuthControllerContext","DateValueLineGraph","usePoolPrizesQuery","NUMBER_OF_POINTS","TicketsSoldGraph","props","pool","chainId","pauseQueries","first","status","data","error","isFetching","prizes","concat","prizePool","console","decimals","underlyingCollateralDecimals","length","lastPrize","currentPrize","awardedBlock","ticketSupply","awardedTimestamp","Date","now","unshift","dataArray","map","prize","warn","tickets","totalTicketSupply","ticketsSold","utils","formatUnits","value","parseInt","date","push","years","months","weeks","days","hours","minutes","seconds"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { ethers } from 'ethers'\nimport { sub, fromUnixTime } from 'date-fns'\nimport { compact } from 'lodash'\n\nimport {\n  DEFAULT_TOKEN_PRECISION,\n} from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { DateValueLineGraph } from 'lib/components/DateValueLineGraph'\nimport { usePoolPrizesQuery } from 'lib/hooks/usePoolPrizesQuery'\n\nconst NUMBER_OF_POINTS = 10\n\nexport const TicketsSoldGraph = (\n  props,\n) => {\n  const { pool } = props\n\n  const { chainId, pauseQueries } = useContext(AuthControllerContext)\n\n  const first = NUMBER_OF_POINTS\n  const { status, data, error, isFetching } = usePoolPrizesQuery(pauseQueries, chainId, pool, first)\n\n  let prizes = compact([].concat(data?.prizePool?.prizes))\n\n  if (error) {\n    console.error(error)\n  }\n\n  const decimals = pool?.underlyingCollateralDecimals\n\n  if (!decimals || !prizes.length || isFetching) {\n    return null\n  }\n\n\n  const lastPrize = prizes[0]\n  let currentPrize\n\n  // If we have a prize amount then we know the last prize has been rewarded\n  if (lastPrize?.awardedBlock) {\n    // unsure why we need to divide by 1000 here when we do it again\n    // when compiling the array ...\n    currentPrize = {\n      ticketSupply: pool.ticketSupply,\n      awardedTimestamp: Date.now() / 1000\n    }\n\n    prizes.unshift(currentPrize)\n  }\n\n\n  const dataArray = prizes.map(prize => {\n    if (!prize) {\n      console.warn('why no prize here?', prize)\n    }\n\n    const tickets = prize?.awardedBlock ? prize?.totalTicketSupply : prize?.ticketSupply\n\n    const ticketsSold = ethers.utils.formatUnits(\n      tickets || '0',\n      decimals || DEFAULT_TOKEN_PRECISION\n    )\n\n    return {\n      value: parseInt(ticketsSold, 10),\n      date: fromUnixTime(prize.awardedTimestamp),\n    }\n  })\n\n  if (dataArray.length < NUMBER_OF_POINTS) {\n    dataArray.push({\n      value: 0,\n      date: sub(\n        dataArray[dataArray.length-1].date,\n        {\n          years: 0,\n          months: 0,\n          weeks: 1,\n          days: 0,\n          hours: 0,\n          minutes: 0,\n          seconds: 0\n        }\n      )\n    })\n  }\n\n  return <>\n    <DateValueLineGraph\n      id='tickets-sold-graph'\n      valueLabel='Tickets'\n      data={[dataArray]}\n    />\n\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}