{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { find } from 'lodash'; // import { DRIP_TOKENS } from 'lib/constants'\n\nexport var extractPoolRewardsFromUserDrips = function extractPoolRewardsFromUserDrips(_ref) {\n  var poolAddresses = _ref.poolAddresses,\n      dynamicPlayerDrips = _ref.dynamicPlayerDrips;\n  var dripTokens = (dynamicPlayerDrips === null || dynamicPlayerDrips === void 0 ? void 0 : dynamicPlayerDrips.dripTokens) || [];\n  var balanceDrips = [];\n  var volumeDrips = []; // const balanceDrips = dynamicPlayerDrips?.balanceDrips.filter(drip => {\n  //   return poolAddresses.includes(drip.balanceDrip.prizePool.id)\n  // })\n  // const volumeDrips = dynamicPlayerDrips?.volumeDrips.filter(drip => {\n  //   return poolAddresses.includes(drip.volumeDrip.prizePool.id)\n  // })\n\n  var playerRewards = {\n    allDrips: [],\n    balance: [],\n    volume: [],\n    refVolume: []\n  };\n  dripTokens.forEach(function (drip) {\n    var _drip$id$split = drip.id.split('-'),\n        _drip$id$split2 = _slicedToArray(_drip$id$split, 3),\n        comptroller = _drip$id$split2[0],\n        dripToken = _drip$id$split2[1],\n        player = _drip$id$split2[2];\n\n    var dripTokenData = {\n      name: 'Unknown',\n      symbol: 'UNK'\n    }; // const dripTokenData = DRIP_TOKENS[dripToken] || {name: 'Unknown', symbol: 'UNK'}\n\n    var finalDripData = _objectSpread({\n      dripToken: {\n        address: dripToken,\n        name: dripTokenData.name,\n        symbol: dripTokenData.symbol\n      }\n    }, drip); // Balance Drips\n\n\n    var balDrip = find(balanceDrips, function (bd) {\n      return bd.balanceDrip.dripToken === dripToken;\n    });\n\n    if (balDrip) {\n      finalDripData = _objectSpread(_objectSpread({}, finalDripData), balDrip);\n      playerRewards.balance.push(_objectSpread({}, finalDripData));\n    } // Volume Drips\n\n\n    var volDrip = find(volumeDrips, function (vd) {\n      return vd.volumeDrip.dripToken === dripToken;\n    });\n\n    if (volDrip) {\n      finalDripData = _objectSpread(_objectSpread({}, finalDripData), volDrip);\n\n      if (volDrip.volumeDrip.referral) {\n        playerRewards.refVolume.push(_objectSpread({}, finalDripData));\n      } else {\n        playerRewards.volume.push(_objectSpread({}, finalDripData));\n      }\n    }\n\n    playerRewards.allDrips.push(_objectSpread({}, finalDripData));\n  });\n  return playerRewards;\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/extractPoolRewardsFromUserDrips.js"],"names":["find","extractPoolRewardsFromUserDrips","poolAddresses","dynamicPlayerDrips","dripTokens","balanceDrips","volumeDrips","playerRewards","allDrips","balance","volume","refVolume","forEach","drip","id","split","comptroller","dripToken","player","dripTokenData","name","symbol","finalDripData","address","balDrip","bd","balanceDrip","push","volDrip","vd","volumeDrip","referral"],"mappings":";;;;;;;AAAA,SAASA,IAAT,QAAqB,QAArB,C,CAEA;;AAEA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,OAA2C;AAAA,MAAxCC,aAAwC,QAAxCA,aAAwC;AAAA,MAAzBC,kBAAyB,QAAzBA,kBAAyB;AACxF,MAAMC,UAAU,GAAG,CAAAD,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEC,UAApB,KAAkC,EAArD;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,WAAW,GAAG,EAApB,CAJwF,CAMxF;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG;AACpBC,IAAAA,QAAQ,EAAE,EADU;AAEpBC,IAAAA,OAAO,EAAE,EAFW;AAGpBC,IAAAA,MAAM,EAAE,EAHY;AAIpBC,IAAAA,SAAS,EAAE;AAJS,GAAtB;AAOAP,EAAAA,UAAU,CAACQ,OAAX,CAAmB,UAAAC,IAAI,EAAI;AAAA,yBACgBA,IAAI,CAACC,EAAL,CAAQC,KAAR,CAAc,GAAd,CADhB;AAAA;AAAA,QAClBC,WADkB;AAAA,QACLC,SADK;AAAA,QACMC,MADN;;AAEzB,QAAMC,aAAa,GAAG;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,MAAM,EAAE;AAA3B,KAAtB,CAFyB,CAGzB;;AACA,QAAIC,aAAa;AACfL,MAAAA,SAAS,EAAE;AACTM,QAAAA,OAAO,EAAEN,SADA;AAETG,QAAAA,IAAI,EAAED,aAAa,CAACC,IAFX;AAGTC,QAAAA,MAAM,EAAEF,aAAa,CAACE;AAHb;AADI,OAMZR,IANY,CAAjB,CAJyB,CAazB;;;AACA,QAAMW,OAAO,GAAGxB,IAAI,CAACK,YAAD,EAAe,UAAAoB,EAAE;AAAA,aAAIA,EAAE,CAACC,WAAH,CAAeT,SAAf,KAA6BA,SAAjC;AAAA,KAAjB,CAApB;;AACA,QAAIO,OAAJ,EAAa;AACXF,MAAAA,aAAa,mCACRA,aADQ,GAERE,OAFQ,CAAb;AAIAjB,MAAAA,aAAa,CAACE,OAAd,CAAsBkB,IAAtB,mBAA+BL,aAA/B;AACD,KArBwB,CAuBzB;;;AACA,QAAMM,OAAO,GAAG5B,IAAI,CAACM,WAAD,EAAc,UAAAuB,EAAE;AAAA,aAAIA,EAAE,CAACC,UAAH,CAAcb,SAAd,KAA4BA,SAAhC;AAAA,KAAhB,CAApB;;AACA,QAAIW,OAAJ,EAAa;AACXN,MAAAA,aAAa,mCACRA,aADQ,GAERM,OAFQ,CAAb;;AAIA,UAAIA,OAAO,CAACE,UAAR,CAAmBC,QAAvB,EAAiC;AAC/BxB,QAAAA,aAAa,CAACI,SAAd,CAAwBgB,IAAxB,mBAAiCL,aAAjC;AACD,OAFD,MAEO;AACLf,QAAAA,aAAa,CAACG,MAAd,CAAqBiB,IAArB,mBAA8BL,aAA9B;AACD;AACF;;AAEDf,IAAAA,aAAa,CAACC,QAAd,CAAuBmB,IAAvB,mBAAgCL,aAAhC;AACD,GAtCD;AAwCA,SAAOf,aAAP;AACD,CA7DM","sourcesContent":["import { find } from 'lodash'\n\n// import { DRIP_TOKENS } from 'lib/constants'\n\nexport const extractPoolRewardsFromUserDrips = ({ poolAddresses, dynamicPlayerDrips }) => {\n  const dripTokens = dynamicPlayerDrips?.dripTokens || []\n\n  const balanceDrips = []\n  const volumeDrips = []\n\n  // const balanceDrips = dynamicPlayerDrips?.balanceDrips.filter(drip => {\n  //   return poolAddresses.includes(drip.balanceDrip.prizePool.id)\n  // })\n  // const volumeDrips = dynamicPlayerDrips?.volumeDrips.filter(drip => {\n  //   return poolAddresses.includes(drip.volumeDrip.prizePool.id)\n  // })\n\n  const playerRewards = {\n    allDrips: [],\n    balance: [],\n    volume: [],\n    refVolume: []\n  }\n\n  dripTokens.forEach(drip => {\n    const [comptroller, dripToken, player] = drip.id.split('-')\n    const dripTokenData = { name: 'Unknown', symbol: 'UNK' }\n    // const dripTokenData = DRIP_TOKENS[dripToken] || {name: 'Unknown', symbol: 'UNK'}\n    let finalDripData = {\n      dripToken: {\n        address: dripToken,\n        name: dripTokenData.name,\n        symbol: dripTokenData.symbol,\n      },\n      ...drip,\n    }\n\n    // Balance Drips\n    const balDrip = find(balanceDrips, bd => bd.balanceDrip.dripToken === dripToken)\n    if (balDrip) {\n      finalDripData = {\n        ...finalDripData,\n        ...balDrip\n      }\n      playerRewards.balance.push({...finalDripData})\n    }\n\n    // Volume Drips\n    const volDrip = find(volumeDrips, vd => vd.volumeDrip.dripToken === dripToken)\n    if (volDrip) {\n      finalDripData = {\n        ...finalDripData,\n        ...volDrip\n      }\n      if (volDrip.volumeDrip.referral) {\n        playerRewards.refVolume.push({...finalDripData})\n      } else {\n        playerRewards.volume.push({...finalDripData})\n      }\n    }\n\n    playerRewards.allDrips.push({...finalDripData})\n  })\n\n  return playerRewards\n}"]},"metadata":{},"sourceType":"module"}