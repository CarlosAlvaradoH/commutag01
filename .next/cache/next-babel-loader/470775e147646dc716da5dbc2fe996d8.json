{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext } from 'react';\nimport { useQueryCache } from 'react-query';\nimport { POOLS } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { TimeTravelPoolQuery } from 'lib/components/TimeTravelPoolQuery';\nimport { UniswapData } from 'lib/components/UniswapData';\nimport { useEthereumErc721Query } from 'lib/hooks/useEthereumErc721Query';\nimport { compileHistoricalPool } from 'lib/services/compileHistoricalPool';\nexport function TimeTravelPool(props) {\n  const {\n    children,\n    blockNumber,\n    poolAddress,\n    prize,\n    querySymbol\n  } = props;\n  const queryCache = useQueryCache();\n  const {\n    chainId,\n    pauseQueries\n  } = useContext(AuthControllerContext);\n  const {\n    defaultReadProvider\n  } = useContext(PoolDataContext);\n  const graphExternalErc721Awards = prize === null || prize === void 0 ? void 0 : prize.awardedExternalErc721Nfts;\n  const {\n    status: externalErc721ChainStatus,\n    data: externalErc721ChainData,\n    error: externalErc721ChainError,\n    isFetching: externalErc721IsFetching\n  } = useEthereumErc721Query({\n    pauseQueries,\n    blockNumber,\n    provider: defaultReadProvider,\n    graphErc721Awards: graphExternalErc721Awards,\n    poolAddress\n  });\n\n  if (externalErc721ChainError) {\n    console.warn(externalErc721ChainError);\n  }\n\n  return __jsx(TimeTravelPoolQuery, {\n    poolAddress: poolAddress,\n    blockNumber: blockNumber\n  }, graphPools => {\n    var _graphPool$prizeStrat, _graphPool$prizeStrat2;\n\n    const graphPool = graphPools === null || graphPools === void 0 ? void 0 : graphPools.find(_graphPool => _graphPool.id === poolAddress);\n    const addresses = graphPool === null || graphPool === void 0 ? void 0 : (_graphPool$prizeStrat = graphPool.prizeStrategy) === null || _graphPool$prizeStrat === void 0 ? void 0 : (_graphPool$prizeStrat2 = _graphPool$prizeStrat.externalErc20Awards) === null || _graphPool$prizeStrat2 === void 0 ? void 0 : _graphPool$prizeStrat2.map(award => award.address);\n    return __jsx(UniswapData, {\n      addresses: addresses,\n      blockNumber: blockNumber,\n      poolAddress: poolAddress\n    }, () => {\n      const poolInfo = POOLS.find(POOL => POOL.symbol === querySymbol);\n      const timeTravelPool = compileHistoricalPool(chainId, poolInfo, queryCache, graphPool, poolAddress, blockNumber, prize);\n      return children(timeTravelPool);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/TimeTravelPool.jsx"],"names":["useContext","useQueryCache","POOLS","AuthControllerContext","PoolDataContext","TimeTravelPoolQuery","UniswapData","useEthereumErc721Query","compileHistoricalPool","TimeTravelPool","props","children","blockNumber","poolAddress","prize","querySymbol","queryCache","chainId","pauseQueries","defaultReadProvider","graphExternalErc721Awards","awardedExternalErc721Nfts","status","externalErc721ChainStatus","data","externalErc721ChainData","error","externalErc721ChainError","isFetching","externalErc721IsFetching","provider","graphErc721Awards","console","warn","graphPools","graphPool","find","_graphPool","id","addresses","prizeStrategy","externalErc20Awards","map","award","address","poolInfo","POOL","symbol","timeTravelPool"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,eAAT,QAAgC,yDAAhC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,sBAAT,QAAuC,kCAAvC;AACA,SAASC,qBAAT,QAAsC,oCAAtC;AAEA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AACnC,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAQA,QAAMM,UAAU,GAAGf,aAAa,EAAhC;AAEA,QAAM;AAAEgB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA4BlB,UAAU,CAACG,qBAAD,CAA5C;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAA0BnB,UAAU,CAACI,eAAD,CAA1C;AAEA,QAAMgB,yBAAyB,GAAGN,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEO,yBAAzC;AAEA,QAAM;AACJC,IAAAA,MAAM,EAAEC,yBADJ;AAEJC,IAAAA,IAAI,EAAEC,uBAFF;AAGJC,IAAAA,KAAK,EAAEC,wBAHH;AAIJC,IAAAA,UAAU,EAAEC;AAJR,MAKFtB,sBAAsB,CAAC;AACzBW,IAAAA,YADyB;AAEzBN,IAAAA,WAFyB;AAGzBkB,IAAAA,QAAQ,EAAEX,mBAHe;AAIzBY,IAAAA,iBAAiB,EAAEX,yBAJM;AAKzBP,IAAAA;AALyB,GAAD,CAL1B;;AAaA,MAAIc,wBAAJ,EAA8B;AAC5BK,IAAAA,OAAO,CAACC,IAAR,CAAaN,wBAAb;AACD;;AAID,SAAO,MAAC,mBAAD;AACL,IAAA,WAAW,EAAEd,WADR;AAEL,IAAA,WAAW,EAAED;AAFR,KAIHsB,UAAD,IAAgB;AAAA;;AACf,UAAMC,SAAS,GAAGD,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEE,IAAZ,CAAiBC,UAAU,IAAIA,UAAU,CAACC,EAAX,KAAkBzB,WAAjD,CAAlB;AACA,UAAM0B,SAAS,GAAGJ,SAAH,aAAGA,SAAH,gDAAGA,SAAS,CAAEK,aAAd,oFAAG,sBAA0BC,mBAA7B,2DAAG,uBAA+CC,GAA/C,CAAmDC,KAAK,IAAIA,KAAK,CAACC,OAAlE,CAAlB;AAEA,WAAO,MAAC,WAAD;AACL,MAAA,SAAS,EAAEL,SADN;AAEL,MAAA,WAAW,EAAE3B,WAFR;AAGL,MAAA,WAAW,EAAEC;AAHR,OAKJ,MAAM;AACL,YAAMgC,QAAQ,GAAG3C,KAAK,CAACkC,IAAN,CAAWU,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBhC,WAAnC,CAAjB;AACA,YAAMiC,cAAc,GAAGxC,qBAAqB,CAC1CS,OAD0C,EAE1C4B,QAF0C,EAG1C7B,UAH0C,EAI1CmB,SAJ0C,EAK1CtB,WAL0C,EAM1CD,WAN0C,EAO1CE,KAP0C,CAA5C;AAUA,aAAOH,QAAQ,CAACqC,cAAD,CAAf;AACD,KAlBI,CAAP;AAoBD,GA5BI,CAAP;AAgCD","sourcesContent":["import { useContext } from 'react'\nimport { useQueryCache } from 'react-query'\n\nimport { POOLS } from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { TimeTravelPoolQuery } from 'lib/components/TimeTravelPoolQuery'\nimport { UniswapData } from 'lib/components/UniswapData'\nimport { useEthereumErc721Query } from 'lib/hooks/useEthereumErc721Query'\nimport { compileHistoricalPool } from 'lib/services/compileHistoricalPool'\n\nexport function TimeTravelPool(props){\n  const {\n    children,\n    blockNumber,\n    poolAddress,\n    prize,\n    querySymbol\n  } = props\n\n  const queryCache = useQueryCache()\n  \n  const { chainId, pauseQueries } = useContext(AuthControllerContext)\n  const { defaultReadProvider } = useContext(PoolDataContext)\n\n  const graphExternalErc721Awards = prize?.awardedExternalErc721Nfts\n\n  const {\n    status: externalErc721ChainStatus,\n    data: externalErc721ChainData,\n    error: externalErc721ChainError,\n    isFetching: externalErc721IsFetching\n  } = useEthereumErc721Query({\n    pauseQueries,\n    blockNumber,\n    provider: defaultReadProvider,\n    graphErc721Awards: graphExternalErc721Awards,\n    poolAddress,\n  })\n\n  if (externalErc721ChainError) {\n    console.warn(externalErc721ChainError)\n  }\n\n\n\n  return <TimeTravelPoolQuery\n    poolAddress={poolAddress}\n    blockNumber={blockNumber}\n  >\n    {(graphPools) => {\n      const graphPool = graphPools?.find(_graphPool => _graphPool.id === poolAddress)\n      const addresses = graphPool?.prizeStrategy?.externalErc20Awards?.map(award => award.address)\n      \n      return <UniswapData\n        addresses={addresses}\n        blockNumber={blockNumber}\n        poolAddress={poolAddress}\n      >\n        {() => {\n          const poolInfo = POOLS.find(POOL => POOL.symbol === querySymbol)\n          const timeTravelPool = compileHistoricalPool(\n            chainId,\n            poolInfo,\n            queryCache,\n            graphPool,\n            poolAddress,\n            blockNumber,\n            prize\n          )\n\n          return children(timeTravelPool)\n        }}\n      </UniswapData>    \n    }}\n  </TimeTravelPoolQuery>\n\n   \n}\n"]},"metadata":{},"sourceType":"module"}