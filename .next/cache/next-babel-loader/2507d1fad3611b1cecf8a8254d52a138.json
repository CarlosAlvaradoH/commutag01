{"ast":null,"code":"import Cookies from 'js-cookie';\nimport { useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { SELECTED_WALLET_COOKIE_KEY } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nconst MILLISECOND_BEFORE_FAST_REDIRECT = 500;\nconst MILLISECONDS_BEFORE_REDIRECT = 2000;\nexport function AccountLoggedIn(props) {\n  const router = useRouter();\n  const {\n    usersAddress\n  } = useContext(AuthControllerContext);\n  const selectedWallet = Cookies.get(SELECTED_WALLET_COOKIE_KEY);\n\n  const redirectToSignIn = () => {\n    router.push('/account?signIn=1', '/account?signIn=1', {\n      shallow: true\n    });\n  };\n\n  useEffect(() => {\n    let redirectTimeoutHandler;\n\n    if (!selectedWallet) {\n      redirectTimeoutHandler = setTimeout(redirectToSignIn, MILLISECOND_BEFORE_FAST_REDIRECT);\n    } else if (!usersAddress) {\n      // This state happens when we haven't yet calculated the usersAddress from the provider\n      // yet we know they've connected a wallet previously\n      redirectTimeoutHandler = setTimeout(redirectToSignIn, MILLISECONDS_BEFORE_REDIRECT);\n    } else if (redirectTimeoutHandler) {\n      clearTimeout(redirectTimeoutHandler);\n    }\n\n    return () => {\n      clearTimeout(redirectTimeoutHandler);\n    };\n  }, [selectedWallet, usersAddress]);\n  return props.children;\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/AccountLoggedIn.jsx"],"names":["Cookies","useContext","useEffect","useRouter","SELECTED_WALLET_COOKIE_KEY","AuthControllerContext","MILLISECOND_BEFORE_FAST_REDIRECT","MILLISECONDS_BEFORE_REDIRECT","AccountLoggedIn","props","router","usersAddress","selectedWallet","get","redirectToSignIn","push","shallow","redirectTimeoutHandler","setTimeout","clearTimeout","children"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,0BAAT,QAA2C,eAA3C;AACA,SAASC,qBAAT,QAAsC,+DAAtC;AAEA,MAAMC,gCAAgC,GAAG,GAAzC;AACA,MAAMC,4BAA4B,GAAG,IAArC;AAEA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAmBV,UAAU,CAACI,qBAAD,CAAnC;AAEA,QAAMO,cAAc,GAAGZ,OAAO,CAACa,GAAR,CAAYT,0BAAZ,CAAvB;;AAEA,QAAMU,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,MAAM,CAACK,IAAP,CACE,mBADF,EAEE,mBAFF,EAGE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAHF;AAKD,GAND;;AAQAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,sBAAJ;;AAEA,QAAI,CAACL,cAAL,EAAqB;AACnBK,MAAAA,sBAAsB,GAAGC,UAAU,CAACJ,gBAAD,EAAmBR,gCAAnB,CAAnC;AACD,KAFD,MAEO,IAAI,CAACK,YAAL,EAAmB;AACxB;AACA;AACAM,MAAAA,sBAAsB,GAAGC,UAAU,CAACJ,gBAAD,EAAmBP,4BAAnB,CAAnC;AACD,KAJM,MAIA,IAAIU,sBAAJ,EAA4B;AACjCE,MAAAA,YAAY,CAACF,sBAAD,CAAZ;AACD;;AAED,WAAO,MAAM;AACXE,MAAAA,YAAY,CAACF,sBAAD,CAAZ;AACD,KAFD;AAGD,GAhBQ,EAgBN,CAACL,cAAD,EAAiBD,YAAjB,CAhBM,CAAT;AAkBA,SAAOF,KAAK,CAACW,QAAb;AACD","sourcesContent":["import Cookies from 'js-cookie'\nimport { useContext, useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\nimport { SELECTED_WALLET_COOKIE_KEY } from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\n\nconst MILLISECOND_BEFORE_FAST_REDIRECT = 500\nconst MILLISECONDS_BEFORE_REDIRECT = 2000\n\nexport function AccountLoggedIn(props) {\n  const router = useRouter()\n\n  const { usersAddress } = useContext(AuthControllerContext)\n\n  const selectedWallet = Cookies.get(SELECTED_WALLET_COOKIE_KEY)\n\n  const redirectToSignIn = () => {\n    router.push(\n      '/account?signIn=1',\n      '/account?signIn=1',\n      { shallow: true }\n    )\n  }\n  \n  useEffect(() => {\n    let redirectTimeoutHandler\n\n    if (!selectedWallet) {\n      redirectTimeoutHandler = setTimeout(redirectToSignIn, MILLISECOND_BEFORE_FAST_REDIRECT)\n    } else if (!usersAddress) {\n      // This state happens when we haven't yet calculated the usersAddress from the provider\n      // yet we know they've connected a wallet previously\n      redirectTimeoutHandler = setTimeout(redirectToSignIn, MILLISECONDS_BEFORE_REDIRECT)\n    } else if (redirectTimeoutHandler) {\n      clearTimeout(redirectTimeoutHandler)\n    }\n\n    return () => {\n      clearTimeout(redirectTimeoutHandler)\n    }\n  }, [selectedWallet, usersAddress])\n\n  return props.children\n}\n"]},"metadata":{},"sourceType":"module"}