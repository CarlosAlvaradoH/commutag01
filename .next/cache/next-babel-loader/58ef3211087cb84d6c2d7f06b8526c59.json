{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext } from 'react';\nimport { useQueryCache } from 'react-query';\nimport { POOLS } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { TimeTravelPoolQuery } from 'lib/components/TimeTravelPoolQuery';\nimport { UniswapData } from 'lib/components/UniswapData';\nimport { useEthereumErc721Query } from 'lib/hooks/useEthereumErc721Query';\nimport { compileHistoricalPool } from 'lib/services/compileHistoricalPool';\nexport function TimeTravelPool(props) {\n  _s();\n\n  var children = props.children,\n      blockNumber = props.blockNumber,\n      poolAddress = props.poolAddress,\n      prize = props.prize,\n      querySymbol = props.querySymbol;\n  var queryCache = useQueryCache();\n\n  var _useContext = useContext(AuthControllerContext),\n      chainId = _useContext.chainId,\n      pauseQueries = _useContext.pauseQueries;\n\n  var _useContext2 = useContext(PoolDataContext),\n      defaultReadProvider = _useContext2.defaultReadProvider;\n\n  var graphExternalErc721Awards = prize === null || prize === void 0 ? void 0 : prize.awardedExternalErc721Nfts;\n\n  var _useEthereumErc721Que = useEthereumErc721Query({\n    pauseQueries: pauseQueries,\n    blockNumber: blockNumber,\n    provider: defaultReadProvider,\n    graphErc721Awards: graphExternalErc721Awards,\n    poolAddress: poolAddress\n  }),\n      externalErc721ChainStatus = _useEthereumErc721Que.status,\n      externalErc721ChainData = _useEthereumErc721Que.data,\n      externalErc721ChainError = _useEthereumErc721Que.error,\n      externalErc721IsFetching = _useEthereumErc721Que.isFetching;\n\n  if (externalErc721ChainError) {\n    console.warn(externalErc721ChainError);\n  }\n\n  return __jsx(TimeTravelPoolQuery, {\n    poolAddress: poolAddress,\n    blockNumber: blockNumber\n  }, function (graphPools) {\n    var _graphPool$prizeStrat, _graphPool$prizeStrat2;\n\n    var graphPool = graphPools === null || graphPools === void 0 ? void 0 : graphPools.find(function (_graphPool) {\n      return _graphPool.id === poolAddress;\n    });\n    var addresses = graphPool === null || graphPool === void 0 ? void 0 : (_graphPool$prizeStrat = graphPool.prizeStrategy) === null || _graphPool$prizeStrat === void 0 ? void 0 : (_graphPool$prizeStrat2 = _graphPool$prizeStrat.externalErc20Awards) === null || _graphPool$prizeStrat2 === void 0 ? void 0 : _graphPool$prizeStrat2.map(function (award) {\n      return award.address;\n    });\n    return __jsx(UniswapData, {\n      addresses: addresses,\n      blockNumber: blockNumber,\n      poolAddress: poolAddress\n    }, function () {\n      var poolInfo = POOLS.find(function (POOL) {\n        return POOL.symbol === querySymbol;\n      });\n      var timeTravelPool = compileHistoricalPool(chainId, poolInfo, queryCache, graphPool, poolAddress, blockNumber, prize);\n      return children(timeTravelPool);\n    });\n  });\n}\n\n_s(TimeTravelPool, \"XI3Tl3ulHHptBoZn3RQuoGj/Ds4=\", false, function () {\n  return [useQueryCache, useEthereumErc721Query];\n});\n\n_c = TimeTravelPool;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeTravelPool\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/TimeTravelPool.jsx"],"names":["useContext","useQueryCache","POOLS","AuthControllerContext","PoolDataContext","TimeTravelPoolQuery","UniswapData","useEthereumErc721Query","compileHistoricalPool","TimeTravelPool","props","children","blockNumber","poolAddress","prize","querySymbol","queryCache","chainId","pauseQueries","defaultReadProvider","graphExternalErc721Awards","awardedExternalErc721Nfts","provider","graphErc721Awards","externalErc721ChainStatus","status","externalErc721ChainData","data","externalErc721ChainError","error","externalErc721IsFetching","isFetching","console","warn","graphPools","graphPool","find","_graphPool","id","addresses","prizeStrategy","externalErc20Awards","map","award","address","poolInfo","POOL","symbol","timeTravelPool"],"mappings":"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","sourcesContent":["import { useContext } from 'react'\nimport { useQueryCache } from 'react-query'\n\nimport { POOLS } from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { TimeTravelPoolQuery } from 'lib/components/TimeTravelPoolQuery'\nimport { UniswapData } from 'lib/components/UniswapData'\nimport { useEthereumErc721Query } from 'lib/hooks/useEthereumErc721Query'\nimport { compileHistoricalPool } from 'lib/services/compileHistoricalPool'\n\nexport function TimeTravelPool(props){\n  const {\n    children,\n    blockNumber,\n    poolAddress,\n    prize,\n    querySymbol\n  } = props\n\n  const queryCache = useQueryCache()\n  \n  const { chainId, pauseQueries } = useContext(AuthControllerContext)\n  const { defaultReadProvider } = useContext(PoolDataContext)\n\n  const graphExternalErc721Awards = prize?.awardedExternalErc721Nfts\n\n  const {\n    status: externalErc721ChainStatus,\n    data: externalErc721ChainData,\n    error: externalErc721ChainError,\n    isFetching: externalErc721IsFetching\n  } = useEthereumErc721Query({\n    pauseQueries,\n    blockNumber,\n    provider: defaultReadProvider,\n    graphErc721Awards: graphExternalErc721Awards,\n    poolAddress,\n  })\n\n  if (externalErc721ChainError) {\n    console.warn(externalErc721ChainError)\n  }\n\n\n\n  return <TimeTravelPoolQuery\n    poolAddress={poolAddress}\n    blockNumber={blockNumber}\n  >\n    {(graphPools) => {\n      const graphPool = graphPools?.find(_graphPool => _graphPool.id === poolAddress)\n      const addresses = graphPool?.prizeStrategy?.externalErc20Awards?.map(award => award.address)\n      \n      return <UniswapData\n        addresses={addresses}\n        blockNumber={blockNumber}\n        poolAddress={poolAddress}\n      >\n        {() => {\n          const poolInfo = POOLS.find(POOL => POOL.symbol === querySymbol)\n          const timeTravelPool = compileHistoricalPool(\n            chainId,\n            poolInfo,\n            queryCache,\n            graphPool,\n            poolAddress,\n            blockNumber,\n            prize\n          )\n\n          return children(timeTravelPool)\n        }}\n      </UniswapData>    \n    }}\n  </TimeTravelPoolQuery>\n\n   \n}\n"]},"metadata":{},"sourceType":"module"}