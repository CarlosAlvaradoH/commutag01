{"ast":null,"code":"import { useContext } from 'react';\nimport { useQuery } from 'react-query';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESSES, MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { fetchExternalLootBoxData } from 'lib/utils/fetchExternalLootBoxData';\nexport function useEthereumLootBoxQuery(pool) {\n  var _CONTRACT_ADDRESSES$c, _pool$prizeStrategy, _pool$prizeStrategy$e, _erc721$tokenIds;\n\n  const {\n    chainId,\n    pauseQueries,\n    provider\n  } = useContext(AuthControllerContext);\n  const lootBoxControllerAddress = (_CONTRACT_ADDRESSES$c = CONTRACT_ADDRESSES[chainId]) === null || _CONTRACT_ADDRESSES$c === void 0 ? void 0 : _CONTRACT_ADDRESSES$c.LootBoxController;\n  const lootBoxAddress = CONTRACT_ADDRESSES[chainId].LootBox;\n  const erc721 = pool === null || pool === void 0 ? void 0 : (_pool$prizeStrategy = pool.prizeStrategy) === null || _pool$prizeStrategy === void 0 ? void 0 : (_pool$prizeStrategy$e = _pool$prizeStrategy.externalErc721Awards) === null || _pool$prizeStrategy$e === void 0 ? void 0 : _pool$prizeStrategy$e.find(erc721 => erc721.address === lootBoxAddress);\n  let tokenId = ethers.utils.bigNumberify(0);\n  tokenId = erc721 === null || erc721 === void 0 ? void 0 : (_erc721$tokenIds = erc721.tokenIds) === null || _erc721$tokenIds === void 0 ? void 0 : _erc721$tokenIds[0];\n  const enabled = !pauseQueries && chainId && Boolean(lootBoxControllerAddress) && Boolean(tokenId);\n  return useQuery([QUERY_KEYS.ethereumLootBoxQuery, chainId, lootBoxControllerAddress, lootBoxAddress, tokenId, -1], async () => await fetchExternalLootBoxData(provider, lootBoxControllerAddress, lootBoxAddress, tokenId), {\n    enabled,\n    refetchInterval: MAINNET_POLLING_INTERVAL\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useEthereumLootBoxQuery.js"],"names":["useContext","useQuery","ethers","CONTRACT_ADDRESSES","MAINNET_POLLING_INTERVAL","QUERY_KEYS","AuthControllerContext","fetchExternalLootBoxData","useEthereumLootBoxQuery","pool","chainId","pauseQueries","provider","lootBoxControllerAddress","LootBoxController","lootBoxAddress","LootBox","erc721","prizeStrategy","externalErc721Awards","find","address","tokenId","utils","bigNumberify","tokenIds","enabled","Boolean","ethereumLootBoxQuery","refetchInterval"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,SACEC,kBADF,EAEEC,wBAFF,EAGEC,UAHF,QAIO,eAJP;AAKA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,wBAAT,QAAyC,oCAAzC;AAEA,OAAO,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AAAA;;AAC5C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAAsCZ,UAAU,CAACM,qBAAD,CAAtD;AAEA,QAAMO,wBAAwB,4BAAGV,kBAAkB,CAACO,OAAD,CAArB,0DAAG,sBAA6BI,iBAA9D;AACA,QAAMC,cAAc,GAAGZ,kBAAkB,CAACO,OAAD,CAAlB,CAA4BM,OAAnD;AAEA,QAAMC,MAAM,GAAGR,IAAH,aAAGA,IAAH,8CAAGA,IAAI,CAAES,aAAT,iFAAG,oBAAqBC,oBAAxB,0DAAG,sBAA2CC,IAA3C,CAAgDH,MAAM,IAAIA,MAAM,CAACI,OAAP,KAAmBN,cAA7E,CAAf;AAEA,MAAIO,OAAO,GAAGpB,MAAM,CAACqB,KAAP,CAAaC,YAAb,CAA0B,CAA1B,CAAd;AACAF,EAAAA,OAAO,GAAGL,MAAH,aAAGA,MAAH,2CAAGA,MAAM,CAAEQ,QAAX,qDAAG,iBAAmB,CAAnB,CAAV;AAEA,QAAMC,OAAO,GAAG,CAACf,YAAD,IACdD,OADc,IAEdiB,OAAO,CAACd,wBAAD,CAFO,IAGdc,OAAO,CAACL,OAAD,CAHT;AAKA,SAAOrB,QAAQ,CACb,CAACI,UAAU,CAACuB,oBAAZ,EAAkClB,OAAlC,EAA2CG,wBAA3C,EAAqEE,cAArE,EAAqFO,OAArF,EAA8F,CAAC,CAA/F,CADa,EAEb,YAAY,MAAMf,wBAAwB,CAACK,QAAD,EAAWC,wBAAX,EAAqCE,cAArC,EAAqDO,OAArD,CAF7B,EAGb;AACEI,IAAAA,OADF;AAEEG,IAAAA,eAAe,EAAEzB;AAFnB,GAHa,CAAf;AAQD","sourcesContent":["import { useContext } from 'react'\nimport { useQuery } from 'react-query'\nimport { ethers } from 'ethers'\n\nimport {\n  CONTRACT_ADDRESSES,\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS,\n} from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { fetchExternalLootBoxData } from 'lib/utils/fetchExternalLootBoxData'\n\nexport function useEthereumLootBoxQuery(pool) {\n  const { chainId, pauseQueries, provider } = useContext(AuthControllerContext)\n\n  const lootBoxControllerAddress = CONTRACT_ADDRESSES[chainId]?.LootBoxController\n  const lootBoxAddress = CONTRACT_ADDRESSES[chainId].LootBox\n\n  const erc721 = pool?.prizeStrategy?.externalErc721Awards?.find(erc721 => erc721.address === lootBoxAddress)\n  \n  let tokenId = ethers.utils.bigNumberify(0)\n  tokenId = erc721?.tokenIds?.[0]\n\n  const enabled = !pauseQueries &&\n    chainId &&\n    Boolean(lootBoxControllerAddress) &&\n    Boolean(tokenId)\n\n  return useQuery(\n    [QUERY_KEYS.ethereumLootBoxQuery, chainId, lootBoxControllerAddress, lootBoxAddress, tokenId, -1],\n    async () => await fetchExternalLootBoxData(provider, lootBoxControllerAddress, lootBoxAddress, tokenId),\n    {\n      enabled,\n      refetchInterval: MAINNET_POLLING_INTERVAL\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}