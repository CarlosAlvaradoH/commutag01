{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { fetchExternalErc20Awards } from 'lib/utils/fetchExternalErc20Awards';\n\nvar getEthereumErc20Data = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchExternalErc20Awards(params);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getEthereumErc20Data(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport function useEthereumErc20Query(pauseQueries, chainId, lootBoxAddress, tokenId) {\n  _s();\n\n  var enabled = !pauseQueries && chainId && Boolean(lootBoxAddress) && Boolean(tokenId);\n  var refetchInterval = blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.ethereumErc20sQuery, chainId, poolAddress, -1], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getEthereumErc20Data(params);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), {\n    enabled: enabled,\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(useEthereumErc20Query, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useEthereumErc20Query.js"],"names":["useQuery","isEmpty","MAINNET_POLLING_INTERVAL","QUERY_KEYS","fetchExternalErc20Awards","getEthereumErc20Data","params","useEthereumErc20Query","pauseQueries","chainId","lootBoxAddress","tokenId","enabled","Boolean","refetchInterval","blockNumber","ethereumErc20sQuery","poolAddress"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,wBAAT,QAAyC,oCAAzC;;AAEA,IAAMC,oBAAoB;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdF,wBAAwB,CAACE,MAAD,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBD,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AAIA,OAAO,SAASE,qBAAT,CAA+BC,YAA/B,EAA6CC,OAA7C,EAAsDC,cAAtD,EAAsEC,OAAtE,EAA+E;AAAA;;AACpF,MAAMC,OAAO,GAAG,CAACJ,YAAD,IACdC,OADc,IAEdI,OAAO,CAACH,cAAD,CAFO,IAGdG,OAAO,CAACF,OAAD,CAHT;AAKA,MAAMG,eAAe,GAAIC,WAAW,KAAK,CAAC,CAAlB,GACtBb,wBADsB,GAEtB,KAFF;AAIA,SAAOF,QAAQ,CACb,CAACG,UAAU,CAACa,mBAAZ,EAAiCP,OAAjC,EAA0CQ,WAA1C,EAAuD,CAAC,CAAxD,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkBZ,oBAAoB,CAACC,MAAD,CAAtC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEM,IAAAA,OAAO,EAAPA,OADF;AAEEE,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GAlBeP,qB;UAUPP,Q","sourcesContent":["import { useQuery } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS,\n} from 'lib/constants'\nimport { fetchExternalErc20Awards } from 'lib/utils/fetchExternalErc20Awards'\n\nconst getEthereumErc20Data = async (params) => {\n  return await fetchExternalErc20Awards(params)\n}\n\nexport function useEthereumErc20Query(pauseQueries, chainId, lootBoxAddress, tokenId) {\n  const enabled = !pauseQueries &&\n    chainId &&\n    Boolean(lootBoxAddress) &&\n    Boolean(tokenId)\n\n  const refetchInterval = (blockNumber === -1) ?\n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.ethereumErc20sQuery, chainId, poolAddress, -1],\n    async () => await getEthereumErc20Data(params),\n    { \n      enabled,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}