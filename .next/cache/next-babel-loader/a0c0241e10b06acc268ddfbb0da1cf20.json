{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { useAtom } from 'jotai';\nimport ERC20Abi from 'lib/../abis/ERC20Abi';\nimport { useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { Button } from 'lib/components/Button';\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction';\nexport const V2MigrateButton = props => {\n  const {\n    balance,\n    balanceFormatted,\n    type,\n    ticker\n  } = props;\n  const [transactions, setTransactions] = useAtom(transactionsAtom);\n  const {\n    t\n  } = useTranslation();\n  const {\n    contractAddresses\n  } = useContext(PoolDataContext);\n  const {\n    usersAddress,\n    provider\n  } = useContext(AuthControllerContext);\n  const {\n    0: txId,\n    1: setTxId\n  } = useState(0);\n  const txName = t(`migrateAmountTickerToV3`, {\n    amount: balanceFormatted,\n    ticker\n  });\n  const method = 'transfer';\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions);\n  const txInFlight = transactions === null || transactions === void 0 ? void 0 : transactions.find(tx => tx.id === txId && !tx.completed && !tx.cancelled);\n\n  const migrateToV3 = () => {\n    let erc777ContractAddress;\n    const dai = ticker === 'DAI';\n\n    if (dai && type === 'pool') {\n      erc777ContractAddress = contractAddresses.v2PoolDAIToken;\n    } else if (dai && type === 'pod') {\n      erc777ContractAddress = contractAddresses.v2DAIPod;\n    } else if (type === 'pool') {\n      erc777ContractAddress = contractAddresses.v2PoolUSDCToken;\n    } else {\n      erc777ContractAddress = contractAddresses.v2USDCPod;\n    } // send shares / balanceOf for Pods\n    // const balanceNormalized = normalizeTo18Decimals(balance, decimals)\n\n\n    const params = [contractAddresses.v2MigrationContractAddress, balance];\n    const id = sendTx(t, provider, usersAddress, ERC20Abi, erc777ContractAddress, method, params);\n    setTxId(id);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    bg: \"green\",\n    text: \"primary\",\n    border: \"green\",\n    textSize: \"xxxs\",\n    padding: \"px-4 py-1\",\n    className: \"uppercase\",\n    disabled: txInFlight,\n    onClick: migrateToV3\n  }, t('migrateToV3')));\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/V2MigrateButton.jsx"],"names":["React","useContext","useState","useAtom","ERC20Abi","useTranslation","AuthControllerContext","PoolDataContext","transactionsAtom","Button","useSendTransaction","V2MigrateButton","props","balance","balanceFormatted","type","ticker","transactions","setTransactions","t","contractAddresses","usersAddress","provider","txId","setTxId","txName","amount","method","sendTx","txInFlight","find","tx","id","completed","cancelled","migrateToV3","erc777ContractAddress","dai","v2PoolDAIToken","v2DAIPod","v2PoolUSDCToken","v2USDCPod","params","v2MigrationContractAddress"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { useAtom } from 'jotai'\n\nimport ERC20Abi from 'lib/../abis/ERC20Abi'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { Button } from 'lib/components/Button'\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction'\n\nexport const V2MigrateButton = (\n  props,\n) => {\n  const { balance, balanceFormatted, type, ticker } = props\n  \n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n\n  const { t } = useTranslation()\n  const { contractAddresses } = useContext(PoolDataContext)\n  const { usersAddress, provider } = useContext(AuthControllerContext)\n\n  const [txId, setTxId] = useState(0)\n\n  const txName = t(`migrateAmountTickerToV3`, { \n    amount: balanceFormatted,\n    ticker\n  })\n  const method = 'transfer'\n\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions)\n\n  \n  \n  const txInFlight = transactions?.find((tx) => (tx.id === txId) && !tx.completed && !tx.cancelled)\n\n  const migrateToV3 = () => {\n    let erc777ContractAddress\n\n    const dai = ticker === 'DAI'\n\n    if (dai && type === 'pool') {\n      erc777ContractAddress = contractAddresses.v2PoolDAIToken\n    } else if (dai && type === 'pod') {\n      erc777ContractAddress = contractAddresses.v2DAIPod\n    } else if (type === 'pool') {\n      erc777ContractAddress = contractAddresses.v2PoolUSDCToken\n    } else {\n      erc777ContractAddress = contractAddresses.v2USDCPod\n    }\n\n    // send shares / balanceOf for Pods\n    // const balanceNormalized = normalizeTo18Decimals(balance, decimals)\n    const params = [\n      contractAddresses.v2MigrationContractAddress,\n      balance\n    ]\n\n    const id = sendTx(\n      t,\n      provider,\n      usersAddress,\n      ERC20Abi,\n      erc777ContractAddress,\n      method,\n      params,\n    )\n    setTxId(id)\n  }\n\n\n  return <>\n    <Button\n      bg='green'\n      text='primary'\n      border='green'\n      textSize='xxxs'\n      padding='px-4 py-1'\n      className='uppercase'\n      disabled={txInFlight}\n      onClick={migrateToV3}\n    >\n      {t('migrateToV3')}\n    </Button>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}