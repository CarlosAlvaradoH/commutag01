{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport classnames from 'classnames';\nimport { useAtom } from 'jotai';\nimport { ethers } from 'ethers';\nimport { isEmpty, map, find, defaultTo, sum } from 'lodash';\nimport ComptrollerAbi from '@pooltogether/pooltogether-contracts/abis/Comptroller';\nimport { useTranslation } from 'lib/../i18n';\nimport { DEFAULT_TOKEN_PRECISION } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { EtherscanTxLink } from 'lib/components/EtherscanTxLink';\nimport { PoolCurrencyIcon } from 'lib/components/PoolCurrencyIcon';\nimport { PoolNumber } from 'lib/components/PoolNumber';\nimport { PoolCountUp } from 'lib/components/PoolCountUp';\nimport { PTCopyToClipboard } from 'lib/components/PTCopyToClipboard';\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction';\nimport { extractPoolRewardsFromUserDrips } from 'lib/utils/extractPoolRewardsFromUserDrips';\nimport { numberWithCommas } from 'lib/utils/numberWithCommas';\nimport { shorten } from 'lib/utils/shorten';\nimport PrizeIllustration from 'assets/images/prize-illustration-new@2x.png';\nexport var AccountRewards = function AccountRewards() {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useAtom = useAtom(transactionsAtom),\n      _useAtom2 = _slicedToArray(_useAtom, 2),\n      transactions = _useAtom2[0],\n      setTransactions = _useAtom2[1];\n\n  var _useContext = useContext(PoolDataContext),\n      pools = _useContext.pools,\n      dynamicPlayerDrips = _useContext.dynamicPlayerDrips,\n      usersChainData = _useContext.usersChainData,\n      graphDripData = _useContext.graphDripData;\n\n  var _useContext2 = useContext(AuthControllerContext),\n      usersAddress = _useContext2.usersAddress,\n      provider = _useContext2.provider;\n\n  var poolAddresses = map(pools, 'poolAddress');\n  var playerRewards = extractPoolRewardsFromUserDrips({\n    poolAddresses: poolAddresses,\n    dynamicPlayerDrips: dynamicPlayerDrips\n  });\n  var domain = '';\n\n  if (window && window.location) {\n    domain = \"\".concat(window.location.hostname).concat(window.location.port ? \":\".concat(window.location.port) : '');\n  }\n\n  var referralAddress = \"https://\".concat(domain, \"/?referrer=\").concat(usersAddress ? usersAddress : '');\n  var shortReferralAddress = \"\".concat(domain, \"/?referrer=\").concat(usersAddress ? shorten(usersAddress) : '');\n\n  var _ref = usersChainData || {},\n      usersDripTokenData = _ref.usersDripTokenData;\n\n  var _useState = useState([]),\n      activeTxDripIds = _useState[0],\n      setActiveTxDripIds = _useState[1];\n\n  var _useState2 = useState(0),\n      txId = _useState2[0],\n      setTxId = _useState2[1];\n\n  var txName = t(\"claimRewards\");\n  var method = 'updateAndClaimDrips';\n\n  var _useSendTransaction = useSendTransaction(txName, transactions, setTransactions),\n      _useSendTransaction2 = _slicedToArray(_useSendTransaction, 1),\n      sendTx = _useSendTransaction2[0];\n\n  var txInFlight = transactions === null || transactions === void 0 ? void 0 : transactions.find(function (tx) {\n    return tx.id === txId;\n  }); // const txsNotCompleted = transactions\n  //   ?.filter(t => !t.completed && !t.cancelled)\n  // useEffect(() => {\n  //   // this is a heavy-handed reset of active tx rows and should be improved but will require \n  //   // putting params/identifying data into the tx object\n  //   console.log(txsNotCompleted)\n  //   if (activeTxDripIds.length > 0 && txsNotCompleted && txsNotCompleted.length === 0) {\n  //     console.log('resetting!')\n  //     setActiveTxDripIds([])\n  //   }\n  // }, [txsNotCompleted])\n\n  var handleClaim = function handleClaim(drip) {\n    var _getParamsForClaim = getParamsForClaim([drip.id]),\n        comptroller = _getParamsForClaim.comptroller,\n        updatePairs = _getParamsForClaim.updatePairs,\n        dripTokens = _getParamsForClaim.dripTokens;\n\n    var params = [updatePairs, usersAddress, dripTokens // {\n    //   gasLimit: 500000\n    // }\n    ];\n    var id = sendTx(t, provider, usersAddress, ComptrollerAbi, comptroller, method, params);\n    setTxId(id);\n  };\n\n  var getParamsForClaim = function getParamsForClaim() {\n    var drips = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var updatePairs = [];\n    var dripTokens = [];\n    var comptroller;\n\n    var _loop = function _loop(i) {\n      var drip = graphDripData.balanceDrips.find(function (drip) {\n        return drip.dripToken.toLowerCase() === drips[i].toLowerCase();\n      });\n\n      if (!drip) {\n        drip = graphDripData.volumeDrips.find(function (drip) {\n          return drip.dripToken.toLowerCase() === drips[i].toLowerCase();\n        });\n      }\n\n      var _drip$id$split = drip.id.split('-'),\n          _drip$id$split2 = _slicedToArray(_drip$id$split, 6),\n          comptrollerAddress = _drip$id$split2[0],\n          sourceAddress = _drip$id$split2[1],\n          measureTokenAddress = _drip$id$split2[2],\n          dripTokenAddress = _drip$id$split2[3],\n          isReferral = _drip$id$split2[4],\n          playerAddress = _drip$id$split2[5];\n\n      isReferral = Boolean(parseInt(isReferral, 10));\n      updatePairs.push({\n        source: sourceAddress,\n        measure: measureTokenAddress\n      });\n      dripTokens.push(dripTokenAddress);\n      comptroller = comptroller || comptrollerAddress;\n    };\n\n    for (var i = 0; i < drips.length; i++) {\n      _loop(i);\n    }\n\n    return {\n      comptroller: comptroller,\n      updatePairs: updatePairs,\n      dripTokens: dripTokens\n    };\n  };\n\n  var getFormattedNumber = function getFormattedNumber(value, decimals) {\n    var formatted = ethers.utils.formatUnits(value, decimals || DEFAULT_TOKEN_PRECISION);\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"font-bold text-flashy\"\n    }, __jsx(PoolCountUp, {\n      duration: 14,\n      fontSansRegular: true,\n      end: Number.parseFloat(formatted),\n      decimals: 8\n    })));\n  };\n\n  var getDripDataByAddress = function getDripDataByAddress(dripTokenAddress, dripTokenData) {\n    var usersDripTokenData = usersChainData.usersDripTokenData;\n    var dripTokens = (playerRewards === null || playerRewards === void 0 ? void 0 : playerRewards.allDrips) || [];\n    var zero = ethers.utils.parseEther('0');\n    var dripData = defaultTo(find(dripTokens, function (d) {\n      return d.dripToken.address === dripTokenAddress;\n    }), {\n      id: dripTokenAddress,\n      dripToken: _objectSpread({\n        address: dripTokenAddress\n      }, dripTokenData),\n      claimable: zero,\n      balance: zero\n    });\n    dripData.claimable = usersDripTokenData ? usersDripTokenData[dripTokenAddress].claimable : zero;\n    dripData.balance = usersDripTokenData ? usersDripTokenData[dripTokenAddress].balance : zero;\n    return dripData;\n  };\n\n  var getClaimButton = function getClaimButton(dripData) {\n    var disabled;\n\n    if (!dripData.claimable.gt(0)) {\n      disabled = true;\n    } // TODO: Handle multiple claims at once\n\n\n    if (txInFlight && !txInFlight.completed && activeTxDripIds.includes(dripData.id)) {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"flex flex-col sm:flex-row items-center justify-end\"\n      }, __jsx(\"span\", {\n        className: \"order-1 sm:order-2\"\n      }, __jsx(ClipLoader, {\n        size: 14,\n        color: '#049c9c'\n      }), __jsx(\"span\", {\n        className: \"text-teal font-bold ml-2 mt-1\"\n      }, t('claiming'))), __jsx(\"span\", {\n        className: \"order-2 sm:order-1\"\n      }, !isEmpty(txInFlight.hash) && __jsx(React.Fragment, null, __jsx(EtherscanTxLink, {\n        chainId: txInFlight.ethersTx.chainId,\n        hash: txInFlight.hash,\n        className: \"text-xxxs text-teal sm:mr-3\"\n      }, \"Etherscan\")))));\n    }\n\n    return __jsx(React.Fragment, null, __jsx(\"a\", {\n      className: classnames('underline cursor-pointer stroke-current font-bold', {\n        'cursor-not-allowed opacity-20': disabled\n      }),\n      onClick: function onClick(e) {\n        e.preventDefault();\n\n        if (disabled) {\n          return;\n        }\n\n        setActiveTxDripIds([].concat(_toConsumableArray(activeTxDripIds), [dripData.id]));\n        handleClaim(dripData);\n      }\n    }, t('claim')));\n  };\n\n  var getRewardsDripRows = function getRewardsDripRows() {\n    return map(usersDripTokenData, function (dripTokenData, dripTokenAddress) {\n      var _pools$, _pools$2;\n\n      var dripData = getDripDataByAddress(dripTokenAddress, dripTokenData);\n      var isPoolDaiTickets = dripTokenData.name === 'PoolTogether Dai Ticket (Compound)' || dripTokenData.name === 'DAI Ticket'; // this is using the only pool in the array, but if we wanted to do this properly\n      // we would first iterate by pool and use the current rewards for that pool to do the calculation\n\n      var daiPoolTickets = parseFloat(ethers.utils.formatUnits(pools === null || pools === void 0 ? void 0 : (_pools$ = pools[0]) === null || _pools$ === void 0 ? void 0 : _pools$.ticketSupply, pools === null || pools === void 0 ? void 0 : (_pools$2 = pools[0]) === null || _pools$2 === void 0 ? void 0 : _pools$2.underlyingCollateralDecimals));\n      var apr = numberWithCommas(1000 * 52 / daiPoolTickets * 100);\n      return __jsx(React.Fragment, null, __jsx(\"tr\", {\n        key: dripData.id\n      }, __jsx(\"td\", {\n        className: \"px-2 sm:px-3 py-2 text-left font-bold\"\n      }, isPoolDaiTickets && __jsx(React.Fragment, null, __jsx(PoolCurrencyIcon, {\n        sm: true,\n        pool: {\n          underlyingCollateralSymbol: 'dai'\n        }\n      })), \" \", isPoolDaiTickets ? t('daiTickets') : dripData.dripToken.name), __jsx(\"td\", {\n        className: \"px-2 sm:px-3 py-2 text-left opacity-60\"\n      }, apr, \"% APR\"), __jsx(\"td\", {\n        className: \"px-2 sm:px-3 py-2 text-left\"\n      }, getFormattedNumber(dripData.claimable, dripData.dripToken.decimals)), __jsx(\"td\", {\n        className: \"px-2 sm:px-3 py-2 text-right\"\n      }, getClaimButton(dripData))));\n    });\n  };\n\n  var getTotalRewards = function getTotalRewards() {\n    var amounts = map(usersDripTokenData, function (dripTokenData, dripTokenAddress) {\n      var dripData = getDripDataByAddress(dripTokenAddress, dripTokenData);\n      return parseFloat(ethers.utils.formatUnits(dripData.claimable, dripData.dripToken.decimals));\n    });\n    return sum(amounts);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"h5\", {\n    className: \"font-normal text-accent-2 mt-12 mb-4\"\n  }, t('myRewards')), __jsx(\"div\", {\n    className: \"xs:mt-3 bg-accent-grey-4 rounded-lg xs:mx-0 px-2 sm:px-6 py-3\"\n  }, __jsx(\"div\", {\n    className: \"flex justify-between flex-col xs:flex-row xs:pt-4 pb-0 px-2 xs:px-4\"\n  }, __jsx(\"div\", {\n    className: \"flex-col order-2 xs:order-1\"\n  }, __jsx(\"h6\", {\n    className: \"flex items-center font-normal\"\n  }, t('totalRewards')), __jsx(\"h3\", null, __jsx(PoolNumber, null, numberWithCommas(getTotalRewards(), {\n    precision: 6\n  }))), __jsx(\"div\", {\n    className: \"opacity-60\"\n  }, \"$\", numberWithCommas(getTotalRewards(), {\n    precision: 6\n  }))), __jsx(\"div\", {\n    className: \"order-1 xs:order-2 ml-auto\"\n  }, __jsx(\"img\", {\n    src: PrizeIllustration,\n    className: \"w-32 mx-auto\"\n  }))), __jsx(\"div\", {\n    className: \"text-inverse flex flex-col justify-between xs:px-2\"\n  }, __jsx(\"table\", {\n    className: \"table-fixed w-full text-xxs xs:text-base mt-6\"\n  }, __jsx(\"tbody\", null, getRewardsDripRows())))), __jsx(\"div\", {\n    className: \"flex flex-col sm:flex-row items-center justify-between bg-accent-grey-4 px-4 sm:px-10 py-4 text-inverse rounded-lg mt-4\"\n  }, __jsx(\"div\", {\n    className: \"flex-grow sm:w-4/12 lg:w-1/2 sm:mr-3 text-xxs sm:text-xs pb-2 sm:pb-0\"\n  }, t('inviteFriendsAndEarnReferralRewards')), __jsx(PTCopyToClipboard, {\n    text: referralAddress,\n    textShort: shortReferralAddress\n  })));\n};\n\n_s(AccountRewards, \"cA7tQL2b067aUf/5Tcds3wuq9L4=\", false, function () {\n  return [useTranslation, useAtom, useSendTransaction];\n});\n\n_c = AccountRewards;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountRewards\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/AccountRewards.jsx"],"names":["React","useContext","useState","ClipLoader","classnames","useAtom","ethers","isEmpty","map","find","defaultTo","sum","ComptrollerAbi","useTranslation","DEFAULT_TOKEN_PRECISION","AuthControllerContext","PoolDataContext","transactionsAtom","EtherscanTxLink","PoolCurrencyIcon","PoolNumber","PoolCountUp","PTCopyToClipboard","useSendTransaction","extractPoolRewardsFromUserDrips","numberWithCommas","shorten","PrizeIllustration","AccountRewards","t","transactions","setTransactions","pools","dynamicPlayerDrips","usersChainData","graphDripData","usersAddress","provider","poolAddresses","playerRewards","domain","window","location","hostname","port","referralAddress","shortReferralAddress","usersDripTokenData","activeTxDripIds","setActiveTxDripIds","txId","setTxId","txName","method","sendTx","txInFlight","tx","id","handleClaim","drip","getParamsForClaim","comptroller","updatePairs","dripTokens","params","drips","i","balanceDrips","dripToken","toLowerCase","volumeDrips","split","comptrollerAddress","sourceAddress","measureTokenAddress","dripTokenAddress","isReferral","playerAddress","Boolean","parseInt","push","source","measure","length","getFormattedNumber","value","decimals","formatted","utils","formatUnits","Number","parseFloat","getDripDataByAddress","dripTokenData","allDrips","zero","parseEther","dripData","d","address","claimable","balance","getClaimButton","disabled","gt","completed","includes","hash","ethersTx","chainId","e","preventDefault","getRewardsDripRows","isPoolDaiTickets","name","daiPoolTickets","ticketSupply","underlyingCollateralDecimals","apr","underlyingCollateralSymbol","getTotalRewards","amounts","precision"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport ClipLoader from 'react-spinners/ClipLoader'\nimport classnames from 'classnames'\nimport { useAtom } from 'jotai'\nimport { ethers } from 'ethers'\nimport { isEmpty, map, find, defaultTo, sum } from 'lodash'\n\nimport ComptrollerAbi from '@pooltogether/pooltogether-contracts/abis/Comptroller'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { DEFAULT_TOKEN_PRECISION } from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { EtherscanTxLink } from 'lib/components/EtherscanTxLink'\nimport { PoolCurrencyIcon } from 'lib/components/PoolCurrencyIcon'\nimport { PoolNumber } from 'lib/components/PoolNumber'\nimport { PoolCountUp } from 'lib/components/PoolCountUp'\nimport { PTCopyToClipboard } from 'lib/components/PTCopyToClipboard'\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction'\nimport { extractPoolRewardsFromUserDrips } from 'lib/utils/extractPoolRewardsFromUserDrips'\nimport { numberWithCommas } from 'lib/utils/numberWithCommas'\nimport { shorten } from 'lib/utils/shorten'\n\nimport PrizeIllustration from 'assets/images/prize-illustration-new@2x.png'\n\nexport const AccountRewards = () => {\n  const { t } = useTranslation()\n\n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n  \n  const { pools, dynamicPlayerDrips, usersChainData, graphDripData } = useContext(PoolDataContext)\n  const { usersAddress, provider } = useContext(AuthControllerContext)\n\n  const poolAddresses = map(pools, 'poolAddress')\n  const playerRewards = extractPoolRewardsFromUserDrips({poolAddresses, dynamicPlayerDrips})\n\n  let domain = ''\n  if (window && window.location) {\n    domain = `${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}`\n  }\n  const referralAddress = `https://${domain}/?referrer=${usersAddress ? usersAddress : ''}`\n  const shortReferralAddress = `${domain}/?referrer=${usersAddress ? shorten(usersAddress) : ''}`\n\n  const { usersDripTokenData } = usersChainData || {}\n\n  const [activeTxDripIds, setActiveTxDripIds] = useState([])\n\n  const [txId, setTxId] = useState(0)\n\n  const txName = t(`claimRewards`)\n  const method = 'updateAndClaimDrips'\n\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions)\n\n  \n  \n  const txInFlight = transactions?.find((tx) => tx.id === txId)\n\n  // const txsNotCompleted = transactions\n  //   ?.filter(t => !t.completed && !t.cancelled)\n  // useEffect(() => {\n  //   // this is a heavy-handed reset of active tx rows and should be improved but will require \n  //   // putting params/identifying data into the tx object\n  //   console.log(txsNotCompleted)\n  //   if (activeTxDripIds.length > 0 && txsNotCompleted && txsNotCompleted.length === 0) {\n  //     console.log('resetting!')\n  //     setActiveTxDripIds([])\n  //   }\n  // }, [txsNotCompleted])\n\n  const handleClaim = (drip) => {\n    const { comptroller, updatePairs, dripTokens } = getParamsForClaim([drip.id])\n\n    const params = [\n      updatePairs,\n      usersAddress,\n      dripTokens,\n      // {\n      //   gasLimit: 500000\n      // }\n    ]\n\n    const id = sendTx(\n      t,\n      provider,\n      usersAddress,\n      ComptrollerAbi,\n      comptroller,\n      method,\n      params,\n    )\n    setTxId(id)\n  }\n\n  const getParamsForClaim = (drips = []) => {\n    const updatePairs = []\n    const dripTokens = []\n    let comptroller\n\n    for (let i = 0; i < drips.length; i++) {\n      let drip = graphDripData.balanceDrips.find(drip => drip.dripToken.toLowerCase() === drips[i].toLowerCase())\n      if (!drip) {\n        drip = graphDripData.volumeDrips.find(drip => drip.dripToken.toLowerCase() === drips[i].toLowerCase())\n      }\n\n      let [\n        comptrollerAddress,\n        sourceAddress,\n        measureTokenAddress,\n        dripTokenAddress,\n        isReferral,\n        playerAddress\n      ] = drip.id.split('-')\n\n      isReferral = Boolean(parseInt(isReferral, 10))\n\n      updatePairs.push({\n        source: sourceAddress,\n        measure: measureTokenAddress,\n      })\n      dripTokens.push(dripTokenAddress)\n      comptroller = comptroller || comptrollerAddress\n    }\n\n    return {comptroller, updatePairs, dripTokens}\n  }\n\n  const getFormattedNumber = (value, decimals) => {\n    const formatted = ethers.utils.formatUnits(\n      value,\n      decimals || DEFAULT_TOKEN_PRECISION\n    )\n\n    return <>\n      <div className='font-bold text-flashy'>\n        <PoolCountUp\n          duration={14}\n          fontSansRegular\n          end={Number.parseFloat(formatted)}\n          decimals={8}\n        />\n        {/* <PoolNumber>\n          {numberWithCommas(formatted, { precision: 6 })}\n        </PoolNumber> */}\n      </div>\n    </>\n  }\n\n  const getDripDataByAddress = (dripTokenAddress, dripTokenData) => {\n    const { usersDripTokenData } = usersChainData\n    const dripTokens = playerRewards?.allDrips || []\n\n    const zero = ethers.utils.parseEther('0')\n\n    const dripData = defaultTo(find(dripTokens, d => d.dripToken.address === dripTokenAddress), {\n      id: dripTokenAddress,\n      dripToken: {\n        address: dripTokenAddress,\n        ...dripTokenData\n      },\n      claimable: zero,\n      balance: zero\n    })\n\n    dripData.claimable = usersDripTokenData ? usersDripTokenData[dripTokenAddress].claimable : zero\n    dripData.balance = usersDripTokenData ? usersDripTokenData[dripTokenAddress].balance : zero\n\n    return dripData\n  }\n\n  const getClaimButton = (dripData) => {\n    let disabled\n    if (!(dripData.claimable.gt(0))) {\n      disabled = true\n    }\n\n    // TODO: Handle multiple claims at once\n    if (txInFlight && !txInFlight.completed && activeTxDripIds.includes(dripData.id)) {\n      return <>\n        <div\n          className='flex flex-col sm:flex-row items-center justify-end'\n        >\n          <span\n            className='order-1 sm:order-2'\n          >\n            <ClipLoader\n              size={14}\n              color={'#049c9c'}\n            />\n            <span className='text-teal font-bold ml-2 mt-1'>{t('claiming')}</span>\n          </span>\n\n          <span\n            className='order-2 sm:order-1'\n          >\n            {!isEmpty(txInFlight.hash) && <>\n              <EtherscanTxLink\n                chainId={txInFlight.ethersTx.chainId}\n                hash={txInFlight.hash}\n                className='text-xxxs text-teal sm:mr-3'\n              >\n                Etherscan\n              </EtherscanTxLink>\n            </>}\n          </span>\n        </div>\n      </>\n    }\n\n    return <>\n      <a\n        className={classnames(\n          'underline cursor-pointer stroke-current font-bold',\n          {\n            'cursor-not-allowed opacity-20': disabled\n          }\n        )}\n        onClick={(e) => {\n          e.preventDefault()\n\n          if (disabled) {\n            return\n          }\n\n          setActiveTxDripIds([...activeTxDripIds, dripData.id])\n\n          handleClaim(dripData)\n        }}\n      >\n        {t('claim')}\n      </a>\n    </>\n  }\n\n  const getRewardsDripRows = () => {\n    return map(usersDripTokenData, (dripTokenData, dripTokenAddress) => {\n      const dripData = getDripDataByAddress(dripTokenAddress, dripTokenData)\n\n      const isPoolDaiTickets = dripTokenData.name === 'PoolTogether Dai Ticket (Compound)'\n        || dripTokenData.name === 'DAI Ticket'\n\n      // this is using the only pool in the array, but if we wanted to do this properly\n      // we would first iterate by pool and use the current rewards for that pool to do the calculation\n      const daiPoolTickets = parseFloat(ethers.utils.formatUnits(pools?.[0]?.ticketSupply, pools?.[0]?.underlyingCollateralDecimals))\n      const apr = numberWithCommas(((1000 * 52) / daiPoolTickets) * 100)\n\n      return <>\n        <tr key={dripData.id}>\n          <td className='px-2 sm:px-3 py-2 text-left font-bold'>\n            {isPoolDaiTickets && <>\n              <PoolCurrencyIcon\n                sm\n                pool={{ underlyingCollateralSymbol: 'dai' }}\n              />\n            </>} {isPoolDaiTickets ? t('daiTickets') : dripData.dripToken.name}\n          </td>\n          <td className='px-2 sm:px-3 py-2 text-left opacity-60'>\n            {apr}% APR\n          </td>\n          <td className='px-2 sm:px-3 py-2 text-left'>\n            {getFormattedNumber(dripData.claimable, dripData.dripToken.decimals)}\n          </td>\n          <td className='px-2 sm:px-3 py-2 text-right'>\n            {getClaimButton(dripData)}\n          </td>\n        </tr>\n      </>\n    })\n  }\n \n  const getTotalRewards = () => {\n    const amounts = map(usersDripTokenData, (dripTokenData, dripTokenAddress) => {\n      const dripData = getDripDataByAddress(dripTokenAddress, dripTokenData)\n\n      return parseFloat(\n        ethers.utils.formatUnits(\n          dripData.claimable,\n          dripData.dripToken.decimals\n        )\n      )\n    })\n\n    return sum(amounts)\n  }\n\n  return <>\n    <h5\n      className='font-normal text-accent-2 mt-12 mb-4'\n    >\n      {t('myRewards')}\n    </h5>\n\n    <div\n      className='xs:mt-3 bg-accent-grey-4 rounded-lg xs:mx-0 px-2 sm:px-6 py-3'\n    >\n      <div className='flex justify-between flex-col xs:flex-row xs:pt-4 pb-0 px-2 xs:px-4'>\n\n        <div className='flex-col order-2 xs:order-1'>\n          <h6\n            className='flex items-center font-normal'\n          >\n            {t('totalRewards')}\n          </h6>\n\n          <h3>\n            <PoolNumber>\n              {numberWithCommas(getTotalRewards(), { precision: 6 })}\n            </PoolNumber>\n          </h3>\n          <div\n            className='opacity-60'\n          >\n            ${numberWithCommas(getTotalRewards(), { precision: 6 })}\n          </div>\n        </div>\n\n        <div\n          className='order-1 xs:order-2 ml-auto'\n        >\n          <img\n            src={PrizeIllustration}\n            className='w-32 mx-auto'\n          />\n        </div>\n      </div>\n\n      <div\n        className='text-inverse flex flex-col justify-between xs:px-2'\n      >\n        <table\n          className='table-fixed w-full text-xxs xs:text-base mt-6'\n        >\n          <tbody>\n            {getRewardsDripRows()}\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <div\n      className='flex flex-col sm:flex-row items-center justify-between bg-accent-grey-4 px-4 sm:px-10 py-4 text-inverse rounded-lg mt-4'\n    >\n      <div className='flex-grow sm:w-4/12 lg:w-1/2 sm:mr-3 text-xxs sm:text-xs pb-2 sm:pb-0'>\n        {t('inviteFriendsAndEarnReferralRewards')}\n      </div>\n\n      <PTCopyToClipboard\n        text={referralAddress}\n        textShort={shortReferralAddress}\n      />\n    </div>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}