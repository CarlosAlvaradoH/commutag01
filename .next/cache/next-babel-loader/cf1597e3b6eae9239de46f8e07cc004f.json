{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Fragment, useContext } from 'react';\nimport ParentSize from '@vx/responsive/lib/components/ParentSize';\nimport { localPoint } from '@vx/event';\nimport { Group } from '@vx/group';\nimport { LinePath } from '@vx/shape';\nimport { useTooltip, useTooltipInPortal, TooltipWithBounds, defaultStyles } from '@vx/tooltip';\nimport { scaleTime, scaleLinear } from '@vx/scale';\nimport { extent, max } from 'd3-array';\nimport { LinearGradient } from '@vx/gradient';\nimport { ThemeContext } from 'lib/components/contextProviders/ThemeContextProvider';\nimport { formatDate } from 'lib/utils/formatDate';\nimport { numberWithCommas } from 'lib/utils/numberWithCommas'; // data accessors\n\nvar getX = function getX(d) {\n  return d.date;\n};\n\nvar getY = function getY(d) {\n  return d.value;\n}; // const height = 200\n\n\nvar margin = {\n  top: 20,\n  bottom: 0,\n  left: 20,\n  right: 20\n};\nexport function DateValueLineGraph(props) {\n  _s();\n\n  var _useTooltip = useTooltip(),\n      tooltipOpen = _useTooltip.tooltipOpen,\n      tooltipLeft = _useTooltip.tooltipLeft,\n      tooltipTop = _useTooltip.tooltipTop,\n      tooltipData = _useTooltip.tooltipData,\n      hideTooltip = _useTooltip.hideTooltip,\n      showTooltip = _useTooltip.showTooltip;\n\n  var _useTooltipInPortal = useTooltipInPortal({\n    detectBounds: true,\n    scroll: true\n  }),\n      containerRef = _useTooltipInPortal.containerRef,\n      TooltipInPortal = _useTooltipInPortal.TooltipInPortal;\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var circleColor = theme === 'light' ? '#401C94' : '#ffffff';\n  var id = props.id;\n  var series = props.data;\n  var allData = series.reduce(function (rec, d) {\n    return rec.concat(d);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"h-32 sm:h-20\"\n  }, __jsx(ParentSize, {\n    className: \"graph-container\",\n    debounceTime: 100\n  }, function (_ref) {\n    var height = _ref.height,\n        width = _ref.width;\n    var xMax = width - margin.left - margin.right;\n    var yMax = height - margin.top - margin.bottom; // scales\n\n    var xScale = scaleTime({\n      range: [0, xMax],\n      domain: extent(allData, getX)\n    });\n    var yScale = scaleLinear({\n      range: [yMax, 0],\n      domain: [0, max(allData, getY)]\n    });\n    return __jsx(Fragment, {\n      key: \"\".concat(id, \"-fragment\")\n    }, tooltipOpen && tooltipData && __jsx(React.Fragment, null, __jsx(TooltipInPortal, {\n      key: Math.random(),\n      top: tooltipTop,\n      left: tooltipLeft,\n      className: \"vx-chart-tooltip\"\n    }, props.valueLabel || 'Value', \": \", __jsx(\"strong\", null, numberWithCommas(tooltipData.value, {\n      precision: 0\n    })), __jsx(\"span\", {\n      className: \"block mt-2\"\n    }, \"Date: \", __jsx(\"strong\", null, formatDate(tooltipData.date / 1000, {\n      \"short\": true\n    }))))), __jsx(\"svg\", {\n      ref: containerRef,\n      width: width,\n      height: height\n    }, width > 8 && series.map(function (lineData, i) {\n      return __jsx(Group, {\n        key: \"\".concat(id, \"-group-lines-\").concat(i),\n        left: margin.left,\n        right: margin.right,\n        top: margin.top\n      }, __jsx(LinearGradient, {\n        id: \"vx-gradient\",\n        vertical: false\n      }, __jsx(\"stop\", {\n        offset: \"0%\",\n        stopColor: \"#ff9304\"\n      }), __jsx(\"stop\", {\n        offset: \"10%\",\n        stopColor: \"#ff04ea\"\n      }), __jsx(\"stop\", {\n        offset: \"20%\",\n        stopColor: \"#9b4beb\"\n      }), __jsx(\"stop\", {\n        offset: \"30%\",\n        stopColor: \"#0e8dd6\"\n      }), __jsx(\"stop\", {\n        offset: \"40%\",\n        stopColor: \"#3be8ff\"\n      }), __jsx(\"stop\", {\n        offset: \"50%\",\n        stopColor: \"#07d464\"\n      }), __jsx(\"stop\", {\n        offset: \"60%\",\n        stopColor: \"#ebf831\"\n      }), __jsx(\"stop\", {\n        offset: \"78%\",\n        stopColor: \"#ff04ab\"\n      }), __jsx(\"stop\", {\n        offset: \"90%\",\n        stopColor: \"#8933eb\"\n      }), __jsx(\"stop\", {\n        offset: \"100%\",\n        stopColor: \"#3b89ff\"\n      })), lineData === null || lineData === void 0 ? void 0 : lineData.map(function (data, j) {\n        return __jsx(React.Fragment, null, __jsx(LinePath, {\n          key: \"\".concat(id, \"-lines-\").concat(i),\n          data: lineData,\n          x: function x(d) {\n            return xScale(getX(d));\n          },\n          y: function y(d) {\n            return yScale(getY(d));\n          },\n          stroke: 'url(#vx-gradient)',\n          strokeWidth: 3\n        }));\n      }), lineData === null || lineData === void 0 ? void 0 : lineData.map(function (data, j) {\n        return __jsx(React.Fragment, null, __jsx(\"circle\", {\n          key: \"\".concat(id, \"-circle-\").concat(i, \"-\").concat(j),\n          r: 4,\n          cx: xScale(getX(data)),\n          cy: yScale(getY(data)),\n          stroke: circleColor,\n          fill: circleColor,\n          className: \"cursor-pointer\",\n          onMouseLeave: hideTooltip,\n          onTouchMove: function onTouchMove(event) {\n            var coords = localPoint(event.target.ownerSVGElement, event);\n            showTooltip({\n              tooltipLeft: coords.x,\n              tooltipTop: coords.y,\n              tooltipData: data\n            });\n          },\n          onMouseMove: function onMouseMove(event) {\n            var coords = localPoint(event.target.ownerSVGElement, event);\n            showTooltip({\n              tooltipLeft: coords.x,\n              tooltipTop: coords.y,\n              tooltipData: data\n            });\n          }\n        }));\n      }));\n    })));\n  })));\n}\n\n_s(DateValueLineGraph, \"KSPMClDmCJl0JUiOMUCJ3uym9G8=\", false, function () {\n  return [useTooltip, useTooltipInPortal];\n});\n\n_c = DateValueLineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateValueLineGraph\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/DateValueLineGraph.jsx"],"names":["React","Fragment","useContext","ParentSize","localPoint","Group","LinePath","useTooltip","useTooltipInPortal","TooltipWithBounds","defaultStyles","scaleTime","scaleLinear","extent","max","LinearGradient","ThemeContext","formatDate","numberWithCommas","getX","d","date","getY","value","margin","top","bottom","left","right","DateValueLineGraph","props","tooltipOpen","tooltipLeft","tooltipTop","tooltipData","hideTooltip","showTooltip","detectBounds","scroll","containerRef","TooltipInPortal","theme","circleColor","id","series","data","allData","reduce","rec","concat","height","width","xMax","yMax","xScale","range","domain","yScale","Math","random","valueLabel","precision","map","lineData","i","j","event","coords","target","ownerSVGElement","x","y"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext } from 'react'\nimport ParentSize from '@vx/responsive/lib/components/ParentSize'\nimport { localPoint } from '@vx/event'\nimport { Group } from '@vx/group'\nimport { LinePath } from '@vx/shape'\nimport { useTooltip, useTooltipInPortal, TooltipWithBounds, defaultStyles } from '@vx/tooltip';\nimport { scaleTime, scaleLinear } from '@vx/scale'\nimport { extent, max } from 'd3-array'\nimport { LinearGradient } from '@vx/gradient'\n\nimport { ThemeContext } from 'lib/components/contextProviders/ThemeContextProvider'\nimport { formatDate } from 'lib/utils/formatDate'\nimport { numberWithCommas } from 'lib/utils/numberWithCommas'\n\n// data accessors\nconst getX = (d) => d.date\nconst getY = (d) => d.value\n\n// const height = 200\nconst margin = {\n  top: 20,\n  bottom: 0,\n  left: 20,\n  right: 20,\n}\n\nexport function DateValueLineGraph(props) {\n  const {\n    tooltipOpen,\n    tooltipLeft,\n    tooltipTop,\n    tooltipData,\n    hideTooltip,\n    showTooltip,\n  } = useTooltip()\n\n  const {\n    containerRef,\n    TooltipInPortal,\n  } = useTooltipInPortal({\n    detectBounds: true,\n    scroll: true,\n  })\n\n  const { theme } = useContext(ThemeContext)\n\n  const circleColor = theme === 'light' ? '#401C94' : '#ffffff'\n\n  const id = props.id\n  const series = props.data\n  const allData = series.reduce((rec, d) => rec.concat(d), [])\n\n  return <>\n    <div\n      className='h-32 sm:h-20'\n    >\n      <ParentSize\n        className='graph-container'\n        debounceTime={100}\n      >\n        {({ height, width }) => {\n          const xMax = width - margin.left - margin.right\n          const yMax = height - margin.top - margin.bottom\n\n          // scales\n          const xScale = scaleTime({\n            range: [0, xMax],\n            domain: extent(allData, getX),\n          })\n          const yScale = scaleLinear({\n            range: [yMax, 0],\n            domain: [0, max(allData, getY)],\n          })\n\n          return <Fragment\n            key={`${id}-fragment`}\n          >\n            {tooltipOpen && tooltipData && <>\n              <TooltipInPortal\n                key={Math.random()}\n                top={tooltipTop}\n                left={tooltipLeft}\n                className='vx-chart-tooltip'\n              >\n                {props.valueLabel || 'Value'}: <strong>\n                  {numberWithCommas(tooltipData.value, { precision: 0 })}\n                </strong>\n                <span className='block mt-2'>\n                  Date: <strong>{formatDate(\n                    tooltipData.date / 1000,\n                    {\n                      short: true\n                    }\n                  )}\n                  </strong>\n                </span>\n              </TooltipInPortal>\n            </>}\n\n            <svg\n              ref={containerRef}\n              width={width}\n              height={height}\n            >\n              {width > 8 && series.map((lineData, i) => (\n                <Group\n                  key={`${id}-group-lines-${i}`}\n                  left={margin.left}\n                  right={margin.right}\n                  top={margin.top}\n                >\n                    <LinearGradient\n                      id='vx-gradient'\n                      vertical={false} \n                    >\n                      <stop offset='0%' stopColor='#ff9304'></stop>\n                      <stop offset='10%' stopColor='#ff04ea'></stop>\n                      <stop offset='20%' stopColor='#9b4beb'></stop>\n                      <stop offset='30%' stopColor='#0e8dd6'></stop>\n                      <stop offset='40%' stopColor='#3be8ff'></stop>\n                      <stop offset='50%' stopColor='#07d464'></stop>\n                      <stop offset='60%' stopColor='#ebf831'></stop>\n                      <stop offset='78%' stopColor='#ff04ab'></stop>\n                      <stop offset='90%' stopColor='#8933eb'></stop>\n                      <stop offset='100%' stopColor='#3b89ff'></stop>\n                    </LinearGradient>\n\n\n                  {lineData?.map((data, j) => {\n                    return <>\n                      <LinePath\n                        key={`${id}-lines-${i}`}\n                        data={lineData}\n                        x={d => xScale(getX(d))}\n                        y={d => yScale(getY(d))}\n                        stroke={'url(#vx-gradient)'}\n                        strokeWidth={3}\n                      />\n                    </>\n                  })}\n\n                  {lineData?.map((data, j) => {\n                    return <>\n                      <circle\n                        key={`${id}-circle-${i}-${j}`}\n                        r={4}\n                        cx={xScale(getX(data))}\n                        cy={yScale(getY(data))}\n                        stroke={circleColor}\n                        fill={circleColor}\n                        className='cursor-pointer'\n                        onMouseLeave={hideTooltip}\n                        onTouchMove={(event) => {\n                          const coords = localPoint(event.target.ownerSVGElement, event);\n\n                          showTooltip({\n                            tooltipLeft: coords.x,\n                            tooltipTop: coords.y,\n                            tooltipData: data\n                          })\n                        }}\n                        onMouseMove={(event) => {\n                          const coords = localPoint(event.target.ownerSVGElement, event);\n\n                          showTooltip({\n                            tooltipLeft: coords.x,\n                            tooltipTop: coords.y,\n                            tooltipData: data\n                          })\n                        }}\n                      />\n                    </>\n                  })}\n\n                </Group>\n              ))}\n            </svg>\n          </Fragment>\n        }}\n      </ParentSize>\n    </div>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}