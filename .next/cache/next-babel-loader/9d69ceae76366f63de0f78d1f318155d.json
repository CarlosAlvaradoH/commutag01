{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport FeatherIcon from 'feather-icons-react';\nimport { useForm } from 'react-hook-form';\nimport { axiosInstance } from 'lib/axiosInstance';\nimport { useTranslation } from 'lib/../i18n';\nimport { TextInputGroup } from 'lib/components/TextInputGroup';\nimport { poolToast } from 'lib/utils/poolToast';\nvar MAILCHIMP_LOCAL_URI = \"/.netlify/functions/mailchimp-signup\";\nexport function EmailSignup(props) {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useForm = useForm({\n    mode: 'all'\n  }),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      watch = _useForm.watch,\n      formState = _useForm.formState;\n\n  var _useState = useState(success),\n      success = _useState[0],\n      setSuccess = _useState[1];\n\n  var watchEmail = watch('email');\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, listId;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!formState.isValid) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.prev = 1;\n              listId = process.env.NEXT_JS_MAILCHIMP_LIST_GENERAL_ID;\n\n              if (listId) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error('No listId supplied');\n\n            case 5:\n              _context.next = 7;\n              return axiosInstance.post(MAILCHIMP_LOCAL_URI, {\n                email: watchEmail,\n                listId: listId\n              });\n\n            case 7:\n              response = _context.sent;\n\n              if (response.status < 400) {\n                setSuccess(true);\n              }\n\n              _context.next = 16;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.warn(_context.t0);\n              console.error(_context.t0.message);\n              poolToast.error(t('mailchimpSubscribeErrorMsg'));\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function onSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"flex flex-col items-start justify-start w-full\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"w-full\"\n  }, __jsx(TextInputGroup, {\n    alignLeft: true,\n    small: true,\n    marginClasses: \"m-0\",\n    paddingClasses: \"px-8 py-2\",\n    borderClasses: \"border-0\",\n    bgClasses: \"bg-primary\",\n    id: \"email\",\n    type: \"email\",\n    name: \"email\",\n    register: register,\n    placeholder: t('yourEmailAddress'),\n    inlineButton: __jsx(React.Fragment, null, __jsx(\"button\", {\n      className: \"flex w-full items-center text-highlight-1 hover:text-darkened focus:text-darkened active:text-darkened font-bold tracking-wider bg-primary hover:bg-highlight-2 active:bg-highlight-2 focus:bg-highlight-2 py-2 px-3 rounded-full trans trans-fastest\"\n    }, success ? __jsx(FeatherIcon, {\n      strokeWidth: \"0.15rem\",\n      icon: \"check-circle\",\n      className: \"mr-2 stroke-current w-4 h-4 relative\",\n      style: {\n        top: 1\n      }\n    }) : __jsx(React.Fragment, null, __jsx(FeatherIcon, {\n      strokeWidth: \"0.15rem\",\n      icon: \"arrow-right\",\n      className: \"mr-2 stroke-current w-4 h-4 relative\",\n      style: {\n        top: 1\n      }\n    }), \" \", t('getNotified'))))\n  })), __jsx(\"div\", {\n    className: \"text-highlight-1 text-xs sm:text-sm lg:text-lg mb-3 text-left\"\n  }, success && t('thankYouYouWillBeNotified'))));\n}\n\n_s(EmailSignup, \"OAPG2p75qM3ASqZigTTWCbti0NU=\", false, function () {\n  return [useTranslation, useForm];\n});\n\n_c = EmailSignup;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailSignup\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/EmailSignup.jsx"],"names":["React","useState","classnames","FeatherIcon","useForm","axiosInstance","useTranslation","TextInputGroup","poolToast","MAILCHIMP_LOCAL_URI","EmailSignup","props","t","mode","handleSubmit","register","watch","formState","success","setSuccess","watchEmail","onSubmit","isValid","listId","process","env","NEXT_JS_MAILCHIMP_LIST_GENERAL_ID","Error","post","email","response","status","console","warn","error","message","top"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport classnames from 'classnames'\nimport FeatherIcon from 'feather-icons-react'\nimport { useForm } from 'react-hook-form'\n\nimport { axiosInstance } from 'lib/axiosInstance'\nimport { useTranslation } from 'lib/../i18n'\nimport { TextInputGroup } from 'lib/components/TextInputGroup'\nimport { poolToast } from 'lib/utils/poolToast'\n\nconst MAILCHIMP_LOCAL_URI = `/.netlify/functions/mailchimp-signup`\n\nexport function EmailSignup(props) {\n  const { t } = useTranslation()\n  const { handleSubmit, register, watch, formState } = useForm({ mode: 'all' })\n\n  const [success, setSuccess] = useState(success)\n  \n  const watchEmail = watch('email')\n\n  const onSubmit = async () => {\n    if (formState.isValid) {\n      let response\n\n      try {\n        const listId = process.env.NEXT_JS_MAILCHIMP_LIST_GENERAL_ID\n\n        if (!listId) {\n          throw new Error('No listId supplied')\n        }\n\n        response = await axiosInstance.post(MAILCHIMP_LOCAL_URI, {\n          email: watchEmail,\n          listId\n        })\n\n        if (response.status < 400) {\n          setSuccess(true)\n        }\n      } catch (error) {\n        console.warn(error)\n        console.error(error.message)\n        poolToast.error(t('mailchimpSubscribeErrorMsg'))\n      }\n    }\n  }\n\n  return <>\n    <div className='flex flex-col items-start justify-start w-full'>\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        className='w-full'\n      >\n        <TextInputGroup\n          alignLeft\n          small\n          marginClasses='m-0'\n          paddingClasses='px-8 py-2'\n          borderClasses='border-0'\n          bgClasses='bg-primary'\n          id='email'\n          type='email'\n          name='email'\n          register={register}\n          placeholder={t('yourEmailAddress')}\n          inlineButton={<>\n            <button\n              className='flex w-full items-center text-highlight-1 hover:text-darkened focus:text-darkened active:text-darkened font-bold tracking-wider bg-primary hover:bg-highlight-2 active:bg-highlight-2 focus:bg-highlight-2 py-2 px-3 rounded-full trans trans-fastest'\n            >\n              {success ?\n                <FeatherIcon\n                  strokeWidth='0.15rem'\n                  icon='check-circle'\n                  className='mr-2 stroke-current w-4 h-4 relative'\n                  style={{\n                    top: 1\n                  }}\n                /> : (\n                  <>\n                    <FeatherIcon\n                      strokeWidth='0.15rem'\n                      icon='arrow-right'\n                      className='mr-2 stroke-current w-4 h-4 relative'\n                      style={{\n                        top: 1\n                      }}\n                    /> {t('getNotified')}\n                  </>\n                )}\n            </button>\n          </>}\n        />\n      </form>\n\n      <div\n        className={`text-highlight-1 text-xs sm:text-sm lg:text-lg mb-3 text-left`}\n      >\n        {success && t('thankYouYouWillBeNotified')}\n      </div>\n    </div>\n  </>\n\n}\n"]},"metadata":{},"sourceType":"module"}