{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { useAtom } from 'jotai';\nimport { ethers } from 'ethers';\nimport IERC20Abi from '@pooltogether/pooltogether-contracts/abis/IERC20';\nimport { useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { Button } from 'lib/components/Button';\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction';\nimport { usersDataForPool } from 'lib/utils/usersDataForPool';\nexport function RevokePoolAllowanceTxButton(props) {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useAtom = useAtom(transactionsAtom),\n      _useAtom2 = _slicedToArray(_useAtom, 2),\n      transactions = _useAtom2[0],\n      setTransactions = _useAtom2[1];\n\n  var _useContext = useContext(AuthControllerContext),\n      provider = _useContext.provider,\n      usersAddress = _useContext.usersAddress;\n\n  var _useContext2 = useContext(PoolDataContext),\n      pool = _useContext2.pool,\n      usersChainData = _useContext2.usersChainData;\n\n  var _usersDataForPool = usersDataForPool(pool, usersChainData),\n      usersTokenAllowance = _usersDataForPool.usersTokenAllowance;\n\n  var poolAddress = pool === null || pool === void 0 ? void 0 : pool.poolAddress;\n  var tokenAddress = pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralToken;\n  var ticker = pool && pool.underlyingCollateralSymbol;\n  var tickerUpcased = ticker && ticker.toUpperCase();\n\n  var _useState = useState(),\n      txId = _useState[0],\n      setTxId = _useState[1];\n\n  var txName = t(\"revokePoolAllowance\", {\n    ticker: tickerUpcased\n  });\n  var method = 'approve';\n\n  var _useSendTransaction = useSendTransaction(txName, transactions, setTransactions),\n      _useSendTransaction2 = _slicedToArray(_useSendTransaction, 1),\n      sendTx = _useSendTransaction2[0];\n\n  var tx = transactions === null || transactions === void 0 ? void 0 : transactions.find(function (tx) {\n    return tx.id === txId;\n  });\n\n  if (usersTokenAllowance.eq(0)) {\n    return null;\n  }\n\n  var handleRevokeAllowanceClick = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var params, id;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              params = [poolAddress, ethers.utils.parseEther('0') // {\n              //   gasLimit: 200000\n              // }\n              ];\n              id = sendTx(t, provider, usersAddress, IERC20Abi, tokenAddress, method, params);\n              setTxId(id);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleRevokeAllowanceClick(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"m-2\"\n  }, __jsx(Button, {\n    secondary: true,\n    onClick: handleRevokeAllowanceClick,\n    disabled: (tx === null || tx === void 0 ? void 0 : tx.sent) && !(tx === null || tx === void 0 ? void 0 : tx.completed)\n  }, t('revokePoolAllowance', {\n    ticker: pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralSymbol\n  }))));\n}\n\n_s(RevokePoolAllowanceTxButton, \"Nb/X8A31YpbK8yMGxl7ls4vQSaQ=\", false, function () {\n  return [useTranslation, useAtom, useSendTransaction];\n});\n\n_c = RevokePoolAllowanceTxButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RevokePoolAllowanceTxButton\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/RevokePoolAllowanceTxButton.jsx"],"names":["React","useContext","useState","useAtom","ethers","IERC20Abi","useTranslation","AuthControllerContext","PoolDataContext","transactionsAtom","Button","useSendTransaction","usersDataForPool","RevokePoolAllowanceTxButton","props","t","transactions","setTransactions","provider","usersAddress","pool","usersChainData","usersTokenAllowance","poolAddress","tokenAddress","underlyingCollateralToken","ticker","underlyingCollateralSymbol","tickerUpcased","toUpperCase","txId","setTxId","txName","method","sendTx","tx","find","id","eq","handleRevokeAllowanceClick","e","preventDefault","params","utils","parseEther","sent","completed"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { useAtom } from 'jotai'\nimport { ethers } from 'ethers'\n\nimport IERC20Abi from '@pooltogether/pooltogether-contracts/abis/IERC20'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { Button } from 'lib/components/Button'\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction'\nimport { usersDataForPool } from 'lib/utils/usersDataForPool'\n\nexport function RevokePoolAllowanceTxButton(props) {\n  const { t } = useTranslation()\n\n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n\n  const { provider, usersAddress } = useContext(AuthControllerContext)\n  const { pool, usersChainData } = useContext(PoolDataContext)\n\n  const {\n    usersTokenAllowance,\n  } = usersDataForPool(pool, usersChainData)\n  \n  const poolAddress = pool?.poolAddress\n  const tokenAddress = pool?.underlyingCollateralToken\n\n  const ticker = pool && pool.underlyingCollateralSymbol\n  const tickerUpcased = ticker && ticker.toUpperCase()\n\n\n  const [txId, setTxId] = useState()\n\n  const txName = t(`revokePoolAllowance`, { ticker: tickerUpcased })\n  const method = 'approve'\n\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions)\n\n  \n  \n  const tx = transactions?.find((tx) => tx.id === txId)\n\n  if (usersTokenAllowance.eq(0)) {\n    return null\n  }\n\n  const handleRevokeAllowanceClick = async (e) => {\n    e.preventDefault()\n\n    const params = [\n      poolAddress,\n      ethers.utils.parseEther('0'),\n      // {\n      //   gasLimit: 200000\n      // }\n    ]\n\n    const id = sendTx(\n      t,\n      provider,\n      usersAddress,\n      IERC20Abi,\n      tokenAddress,\n      method,\n      params,\n    )\n\n    setTxId(id)\n  }\n\n  return <>\n    <div className='m-2'>\n      <Button\n        secondary\n        onClick={handleRevokeAllowanceClick}\n        disabled={tx?.sent && !tx?.completed}\n      >\n        {t('revokePoolAllowance', {\n          ticker: pool?.underlyingCollateralSymbol\n        })}\n      </Button>\n    </div>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}