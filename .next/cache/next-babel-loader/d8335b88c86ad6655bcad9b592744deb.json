{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { useAtom } from 'jotai';\nimport ERC20Abi from 'lib/../abis/ERC20Abi';\nimport { useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { Button } from 'lib/components/Button';\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction';\nexport var V2MigrateButton = function V2MigrateButton(props) {\n  _s();\n\n  var balance = props.balance,\n      balanceFormatted = props.balanceFormatted,\n      type = props.type,\n      ticker = props.ticker;\n\n  var _useAtom = useAtom(transactionsAtom),\n      _useAtom2 = _slicedToArray(_useAtom, 2),\n      transactions = _useAtom2[0],\n      setTransactions = _useAtom2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useContext = useContext(PoolDataContext),\n      contractAddresses = _useContext.contractAddresses;\n\n  var _useContext2 = useContext(AuthControllerContext),\n      usersAddress = _useContext2.usersAddress,\n      provider = _useContext2.provider;\n\n  var _useState = useState(0),\n      txId = _useState[0],\n      setTxId = _useState[1];\n\n  var txName = t(\"migrateAmountTickerToV3\", {\n    amount: balanceFormatted,\n    ticker: ticker\n  });\n  var method = 'transfer';\n\n  var _useSendTransaction = useSendTransaction(txName, transactions, setTransactions),\n      _useSendTransaction2 = _slicedToArray(_useSendTransaction, 1),\n      sendTx = _useSendTransaction2[0];\n\n  var txInFlight = transactions === null || transactions === void 0 ? void 0 : transactions.find(function (tx) {\n    return tx.id === txId && !tx.completed && !tx.cancelled;\n  });\n\n  var migrateToV3 = function migrateToV3() {\n    var erc777ContractAddress;\n    var dai = ticker === 'DAI';\n\n    if (dai && type === 'pool') {\n      erc777ContractAddress = contractAddresses.v2PoolDAIToken;\n    } else if (dai && type === 'pod') {\n      erc777ContractAddress = contractAddresses.v2DAIPod;\n    } else if (type === 'pool') {\n      erc777ContractAddress = contractAddresses.v2PoolUSDCToken;\n    } else {\n      erc777ContractAddress = contractAddresses.v2USDCPod;\n    } // send shares / balanceOf for Pods\n    // const balanceNormalized = normalizeTo18Decimals(balance, decimals)\n\n\n    var params = [contractAddresses.v2MigrationContractAddress, balance];\n    var id = sendTx(t, provider, usersAddress, ERC20Abi, erc777ContractAddress, method, params);\n    setTxId(id);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    bg: \"green\",\n    text: \"primary\",\n    border: \"green\",\n    textSize: \"xxxs\",\n    padding: \"px-4 py-1\",\n    className: \"uppercase\",\n    disabled: txInFlight,\n    onClick: migrateToV3\n  }, t('migrateToV3')));\n};\n\n_s(V2MigrateButton, \"QKqtX5MeF6qZ1u20t4OQ26TaASo=\", false, function () {\n  return [useAtom, useTranslation, useSendTransaction];\n});\n\n_c = V2MigrateButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"V2MigrateButton\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/V2MigrateButton.jsx"],"names":["React","useContext","useState","useAtom","ERC20Abi","useTranslation","AuthControllerContext","PoolDataContext","transactionsAtom","Button","useSendTransaction","V2MigrateButton","props","balance","balanceFormatted","type","ticker","transactions","setTransactions","t","contractAddresses","usersAddress","provider","txId","setTxId","txName","amount","method","sendTx","txInFlight","find","tx","id","completed","cancelled","migrateToV3","erc777ContractAddress","dai","v2PoolDAIToken","v2DAIPod","v2PoolUSDCToken","v2USDCPod","params","v2MigrationContractAddress"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { useAtom } from 'jotai'\n\nimport ERC20Abi from 'lib/../abis/ERC20Abi'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { Button } from 'lib/components/Button'\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction'\n\nexport const V2MigrateButton = (\n  props,\n) => {\n  const { balance, balanceFormatted, type, ticker } = props\n  \n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n\n  const { t } = useTranslation()\n  const { contractAddresses } = useContext(PoolDataContext)\n  const { usersAddress, provider } = useContext(AuthControllerContext)\n\n  const [txId, setTxId] = useState(0)\n\n  const txName = t(`migrateAmountTickerToV3`, { \n    amount: balanceFormatted,\n    ticker\n  })\n  const method = 'transfer'\n\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions)\n\n  \n  \n  const txInFlight = transactions?.find((tx) => (tx.id === txId) && !tx.completed && !tx.cancelled)\n\n  const migrateToV3 = () => {\n    let erc777ContractAddress\n\n    const dai = ticker === 'DAI'\n\n    if (dai && type === 'pool') {\n      erc777ContractAddress = contractAddresses.v2PoolDAIToken\n    } else if (dai && type === 'pod') {\n      erc777ContractAddress = contractAddresses.v2DAIPod\n    } else if (type === 'pool') {\n      erc777ContractAddress = contractAddresses.v2PoolUSDCToken\n    } else {\n      erc777ContractAddress = contractAddresses.v2USDCPod\n    }\n\n    // send shares / balanceOf for Pods\n    // const balanceNormalized = normalizeTo18Decimals(balance, decimals)\n    const params = [\n      contractAddresses.v2MigrationContractAddress,\n      balance\n    ]\n\n    const id = sendTx(\n      t,\n      provider,\n      usersAddress,\n      ERC20Abi,\n      erc777ContractAddress,\n      method,\n      params,\n    )\n    setTxId(id)\n  }\n\n\n  return <>\n    <Button\n      bg='green'\n      text='primary'\n      border='green'\n      textSize='xxxs'\n      padding='px-4 py-1'\n      className='uppercase'\n      disabled={txInFlight}\n      onClick={migrateToV3}\n    >\n      {t('migrateToV3')}\n    </Button>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}