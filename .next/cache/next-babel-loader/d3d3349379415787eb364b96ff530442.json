{"ast":null,"code":"import { useContext } from 'react';\nimport { useQuery } from 'react-query';\nimport { CONTRACT_ADDRESSES, MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { fetchExternalLootBoxData } from 'lib/utils/fetchExternalLootBoxData';\nexport function useEthereumLootBoxQuery() {\n  var _pool, _pool$prizeStrategy, _pool$prizeStrategy$e, _erc721$tokenIds;\n\n  const {\n    chainId,\n    pauseQueries\n  } = useContext(AuthControllerContext);\n  const filterAddress = CONTRACT_ADDRESSES[chainId].LootBox;\n  const erc721 = (_pool = pool) === null || _pool === void 0 ? void 0 : (_pool$prizeStrategy = _pool.prizeStrategy) === null || _pool$prizeStrategy === void 0 ? void 0 : (_pool$prizeStrategy$e = _pool$prizeStrategy.externalErc721Awards) === null || _pool$prizeStrategy$e === void 0 ? void 0 : _pool$prizeStrategy$e.find(erc721 => erc721.address === filterAddress);\n  console.log(filterAddress);\n  console.log(erc721s); // const { lootBoxAddress, tokenId } = useGraphLootBoxQuery(lootBoxAddress, tokenId)\n\n  const tokenId = erc721 === null || erc721 === void 0 ? void 0 : (_erc721$tokenIds = erc721.tokenIds) === null || _erc721$tokenIds === void 0 ? void 0 : _erc721$tokenIds[0];\n  const enabled = !pauseQueries && chainId && Boolean(filterAddress) && Boolean(tokenId);\n  return useQuery([QUERY_KEYS.ethereumLootBoxQuery, chainId, filterAddress, tokenId, -1], async () => await fetchExternalLootBoxData(provider, filterAddress, tokenId), {\n    enabled,\n    refetchInterval: MAINNET_POLLING_INTERVAL\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useEthereumLootBoxQuery.js"],"names":["useContext","useQuery","CONTRACT_ADDRESSES","MAINNET_POLLING_INTERVAL","QUERY_KEYS","AuthControllerContext","fetchExternalLootBoxData","useEthereumLootBoxQuery","chainId","pauseQueries","filterAddress","LootBox","erc721","pool","prizeStrategy","externalErc721Awards","find","address","console","log","erc721s","tokenId","tokenIds","enabled","Boolean","ethereumLootBoxQuery","provider","refetchInterval"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SACEC,kBADF,EAEEC,wBAFF,EAGEC,UAHF,QAIO,eAJP;AAKA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,wBAAT,QAAyC,oCAAzC;AAEA,OAAO,SAASC,uBAAT,GAAmC;AAAA;;AACxC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA4BT,UAAU,CAACK,qBAAD,CAA5C;AAEA,QAAMK,aAAa,GAAGR,kBAAkB,CAACM,OAAD,CAAlB,CAA4BG,OAAlD;AACA,QAAMC,MAAM,YAAGC,IAAH,iEAAG,MAAMC,aAAT,iFAAG,oBAAqBC,oBAAxB,0DAAG,sBAA2CC,IAA3C,CAAgDJ,MAAM,IAAIA,MAAM,CAACK,OAAP,KAAmBP,aAA7E,CAAf;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYT,aAAZ;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ,EANwC,CAQxC;;AACA,QAAMC,OAAO,GAAGT,MAAH,aAAGA,MAAH,2CAAGA,MAAM,CAAEU,QAAX,qDAAG,iBAAmB,CAAnB,CAAhB;AAEA,QAAMC,OAAO,GAAG,CAACd,YAAD,IACdD,OADc,IAEdgB,OAAO,CAACd,aAAD,CAFO,IAGdc,OAAO,CAACH,OAAD,CAHT;AAKA,SAAOpB,QAAQ,CACb,CAACG,UAAU,CAACqB,oBAAZ,EAAkCjB,OAAlC,EAA2CE,aAA3C,EAA0DW,OAA1D,EAAmE,CAAC,CAApE,CADa,EAEb,YAAY,MAAMf,wBAAwB,CAACoB,QAAD,EAAWhB,aAAX,EAA0BW,OAA1B,CAF7B,EAGb;AACEE,IAAAA,OADF;AAEEI,IAAAA,eAAe,EAAExB;AAFnB,GAHa,CAAf;AAQD","sourcesContent":["import { useContext } from 'react'\nimport { useQuery } from 'react-query'\n\nimport {\n  CONTRACT_ADDRESSES,\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS,\n} from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { fetchExternalLootBoxData } from 'lib/utils/fetchExternalLootBoxData'\n\nexport function useEthereumLootBoxQuery() {\n  const { chainId, pauseQueries } = useContext(AuthControllerContext)\n\n  const filterAddress = CONTRACT_ADDRESSES[chainId].LootBox\n  const erc721 = pool?.prizeStrategy?.externalErc721Awards?.find(erc721 => erc721.address === filterAddress)\n  console.log(filterAddress)\n  console.log(erc721s)\n\n  // const { lootBoxAddress, tokenId } = useGraphLootBoxQuery(lootBoxAddress, tokenId)\n  const tokenId = erc721?.tokenIds?.[0]\n  \n  const enabled = !pauseQueries &&\n    chainId &&\n    Boolean(filterAddress) &&\n    Boolean(tokenId)\n\n  return useQuery(\n    [QUERY_KEYS.ethereumLootBoxQuery, chainId, filterAddress, tokenId, -1],\n    async () => await fetchExternalLootBoxData(provider, filterAddress, tokenId),\n    {\n      enabled,\n      refetchInterval: MAINNET_POLLING_INTERVAL\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}