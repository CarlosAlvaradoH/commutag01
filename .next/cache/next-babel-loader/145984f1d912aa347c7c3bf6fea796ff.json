{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { batch, contract } from '@pooltogether/etherplex';\nimport LootBoxControllerAbi from '@pooltogether/loot-box/abis/LootBoxController';\n\nvar debug = require('debug')('pool-app:fetchExternalLootBoxData');\n\nexport var fetchExternalLootBoxData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider, lootBoxAddress, tokenId) {\n    var _values$lootBoxContro, _values$lootBoxContro2, etherplexLootBoxControllerContract, values;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(provider);\n            console.log(lootBoxAddress);\n            console.log(tokenId);\n            _context.prev = 3;\n            etherplexLootBoxControllerContract = contract('lootBoxController', LootBoxControllerAbi, lootBoxAddress);\n            _context.next = 7;\n            return batch(provider, etherplexLootBoxControllerContract.computeAddress(lootBoxAddress, tokenId));\n\n          case 7:\n            values = _context.sent;\n            console.log(values);\n            return _context.abrupt(\"return\", {\n              computedLootBoxAddress: values === null || values === void 0 ? void 0 : (_values$lootBoxContro = values.lootBoxController) === null || _values$lootBoxContro === void 0 ? void 0 : (_values$lootBoxContro2 = _values$lootBoxContro.computeAddress) === null || _values$lootBoxContro2 === void 0 ? void 0 : _values$lootBoxContro2[0],\n              loading: false\n            });\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](3);\n            throw {\n              name: 'fetchExternalLootBoxData Error',\n              message: \"Error from Infura was: \".concat(_context.t0.message)\n            };\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 12]]);\n  }));\n\n  return function fetchExternalLootBoxData(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/fetchExternalLootBoxData.js"],"names":["batch","contract","LootBoxControllerAbi","debug","require","fetchExternalLootBoxData","provider","lootBoxAddress","tokenId","console","log","etherplexLootBoxControllerContract","computeAddress","values","computedLootBoxAddress","lootBoxController","loading","name","message"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,yBAAhC;AAEA,OAAOC,oBAAP,MAAiC,+CAAjC;;AAEA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,mCAAjB,CAAd;;AAEA,OAAO,IAAMC,wBAAwB;AAAA,sEAAG,iBACtCC,QADsC,EAEtCC,cAFsC,EAGtCC,OAHsC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKtCC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,YAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAPsC;AAU9BG,YAAAA,kCAV8B,GAUOV,QAAQ,CACjD,mBADiD,EAEjDC,oBAFiD,EAGjDK,cAHiD,CAVf;AAAA;AAAA,mBAgBfP,KAAK,CACxBM,QADwB,EAExBK,kCAAkC,CAC/BC,cADH,CACkBL,cADlB,EACkCC,OADlC,CAFwB,CAhBU;;AAAA;AAgB9BK,YAAAA,MAhB8B;AAqBpCJ,YAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AArBoC,6CAuB7B;AACLC,cAAAA,sBAAsB,EAAED,MAAF,aAAEA,MAAF,gDAAEA,MAAM,CAAEE,iBAAV,oFAAE,sBAA2BH,cAA7B,2DAAE,uBAA4C,CAA5C,CADnB;AAELI,cAAAA,OAAO,EAAE;AAFJ,aAvB6B;;AAAA;AAAA;AAAA;AAAA,kBA4B9B;AACJC,cAAAA,IAAI,EAAE,gCADF;AAEJC,cAAAA,OAAO,mCAA4B,YAAEA,OAA9B;AAFH,aA5B8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxBb,wBAAwB;AAAA;AAAA;AAAA,GAA9B","sourcesContent":["import { batch, contract } from '@pooltogether/etherplex'\n\nimport LootBoxControllerAbi from '@pooltogether/loot-box/abis/LootBoxController'\n\nconst debug = require('debug')('pool-app:fetchExternalLootBoxData')\n\nexport const fetchExternalLootBoxData = async (\n  provider,\n  lootBoxAddress,\n  tokenId,\n) => {\n  console.log(provider)\n  console.log(lootBoxAddress)\n  console.log(tokenId)\n\n  try {\n    const etherplexLootBoxControllerContract = contract(\n      'lootBoxController',\n      LootBoxControllerAbi,\n      lootBoxAddress\n    )\n\n    const values = await batch(\n      provider,\n      etherplexLootBoxControllerContract\n        .computeAddress(lootBoxAddress, tokenId)\n    )\n    console.log(values)\n\n    return {\n      computedLootBoxAddress: values?.lootBoxController?.computeAddress?.[0],\n      loading: false\n    }\n  } catch (e) {\n    throw {\n      name: 'fetchExternalLootBoxData Error',\n      message: `Error from Infura was: ${e.message}`\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}