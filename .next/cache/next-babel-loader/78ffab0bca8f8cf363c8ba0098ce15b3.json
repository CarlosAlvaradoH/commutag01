{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { batch, contract } from '@pooltogether/etherplex';\nimport LootBoxControllerAbi from '@pooltogether/loot-box/abis/LootBoxController';\n\nvar debug = require('debug')('pool-app:fetchExternalLootBoxData');\n\nexport var fetchExternalLootBoxData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var provider, lootBoxAddress, tokenId, _values$lootBoxContro, _values$lootBoxContro2, etherplexLootBoxControllerContract, values;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = _ref.provider, lootBoxAddress = _ref.lootBoxAddress, tokenId = _ref.tokenId;\n            _context.prev = 1;\n            etherplexLootBoxControllerContract = contract('lootBoxController', LootBoxControllerAbi, lootBoxAddress);\n            _context.next = 5;\n            return batch(provider, etherplexLootBoxControllerContract.computeAddress(lootBoxAddress, tokenId));\n\n          case 5:\n            values = _context.sent;\n            console.log(values);\n            return _context.abrupt(\"return\", {\n              computedLootBoxAddress: values === null || values === void 0 ? void 0 : (_values$lootBoxContro = values.lootBoxController) === null || _values$lootBoxContro === void 0 ? void 0 : (_values$lootBoxContro2 = _values$lootBoxContro.computeAddress) === null || _values$lootBoxContro2 === void 0 ? void 0 : _values$lootBoxContro2[0],\n              loading: false\n            });\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            throw {\n              name: 'fetchExternalLootBoxData Error',\n              message: \"Error from Infura was: \".concat(_context.t0.message)\n            };\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 10]]);\n  }));\n\n  return function fetchExternalLootBoxData(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/fetchExternalLootBoxData.js"],"names":["batch","contract","LootBoxControllerAbi","debug","require","fetchExternalLootBoxData","provider","lootBoxAddress","tokenId","etherplexLootBoxControllerContract","computeAddress","values","console","log","computedLootBoxAddress","lootBoxController","loading","name","message"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,yBAAhC;AAEA,OAAOC,oBAAP,MAAiC,+CAAjC;;AAEA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,mCAAjB,CAAd;;AAEA,OAAO,IAAMC,wBAAwB;AAAA,uEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtCC,YAAAA,QADsC,QACtCA,QADsC,EAEtCC,cAFsC,QAEtCA,cAFsC,EAGtCC,OAHsC,QAGtCA,OAHsC;AAAA;AAM9BC,YAAAA,kCAN8B,GAMOR,QAAQ,CACjD,mBADiD,EAEjDC,oBAFiD,EAGjDK,cAHiD,CANf;AAAA;AAAA,mBAYfP,KAAK,CACxBM,QADwB,EAExBG,kCAAkC,CAC/BC,cADH,CACkBH,cADlB,EACkCC,OADlC,CAFwB,CAZU;;AAAA;AAY9BG,YAAAA,MAZ8B;AAiBpCC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAjBoC,6CAmB7B;AACLG,cAAAA,sBAAsB,EAAEH,MAAF,aAAEA,MAAF,gDAAEA,MAAM,CAAEI,iBAAV,oFAAE,sBAA2BL,cAA7B,2DAAE,uBAA4C,CAA5C,CADnB;AAELM,cAAAA,OAAO,EAAE;AAFJ,aAnB6B;;AAAA;AAAA;AAAA;AAAA,kBAwB9B;AACJC,cAAAA,IAAI,EAAE,gCADF;AAEJC,cAAAA,OAAO,mCAA4B,YAAEA,OAA9B;AAFH,aAxB8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxBb,wBAAwB;AAAA;AAAA;AAAA,GAA9B","sourcesContent":["import { batch, contract } from '@pooltogether/etherplex'\n\nimport LootBoxControllerAbi from '@pooltogether/loot-box/abis/LootBoxController'\n\nconst debug = require('debug')('pool-app:fetchExternalLootBoxData')\n\nexport const fetchExternalLootBoxData = async ({\n  provider,\n  lootBoxAddress,\n  tokenId,\n}) => {\n  try {\n    const etherplexLootBoxControllerContract = contract(\n      'lootBoxController',\n      LootBoxControllerAbi,\n      lootBoxAddress\n    )\n\n    const values = await batch(\n      provider,\n      etherplexLootBoxControllerContract\n        .computeAddress(lootBoxAddress, tokenId)\n    )\n    console.log(values)\n\n    return {\n      computedLootBoxAddress: values?.lootBoxController?.computeAddress?.[0],\n      loading: false\n    }\n  } catch (e) {\n    throw {\n      name: 'fetchExternalLootBoxData Error',\n      message: `Error from Infura was: ${e.message}`\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}