{"ast":null,"code":"import { format } from 'date-fns';\nimport { isUndefined } from 'lodash';\nexport const poolFormat = (date, currentLang = 'en', formatStr = 'PP', noAbbrev) => {\n  let locale;\n\n  if (currentLang === 'zh') {\n    locale = require('date-fns/locale/zh-CN');\n  } else if (currentLang === 'de') {\n    locale = require('date-fns/locale/de');\n  } else if (currentLang === 'es') {\n    locale = require('date-fns/locale/es');\n  } else if (currentLang === 'fr') {\n    locale = require('date-fns/locale/fr');\n  } else if (currentLang === 'it') {\n    locale = require('date-fns/locale/it');\n  } else if (currentLang === 'ja') {\n    locale = require('date-fns/locale/ja');\n  } else if (currentLang === 'hr') {\n    locale = require('date-fns/locale/hr');\n  } else if (currentLang === 'tr') {\n    locale = require('date-fns/locale/tr');\n  } else if (currentLang === 'ko') {\n    locale = require('date-fns/locale/ko');\n  } else {\n    locale = require('date-fns/locale/en-GB');\n  } // our Spanish community rep asked for days to be before month names\n\n\n  if (currentLang === 'es') {\n    formatStr = 'do MMMM yyyy';\n  } // by providing a default string of 'PP' or any of its variants for `formatStr`\n  // it will format dates in whichever way is appropriate to the locale\n\n\n  const formattedDate = format(date * 1000, formatStr, {\n    locale: locale.default\n  });\n  let abbrev = '';\n\n  if (isUndefined(noAbbrev)) {\n    abbrev = new Date().toLocaleTimeString('en-us', {\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  }\n\n  return `${formattedDate} ${abbrev}`;\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/date-fns-factory.js"],"names":["format","isUndefined","poolFormat","date","currentLang","formatStr","noAbbrev","locale","require","formattedDate","default","abbrev","Date","toLocaleTimeString","timeZoneName","split"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,WAAT,QAA4B,QAA5B;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,WAAW,GAAG,IAArB,EAA2BC,SAAS,GAAG,IAAvC,EAA6CC,QAA7C,KAA0D;AAClF,MAAIC,MAAJ;;AAEA,MAAIH,WAAW,KAAK,IAApB,EAA0B;AACxBG,IAAAA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAAhB;AACD,GAFD,MAEO,IAAIJ,WAAW,KAAK,IAApB,EAA0B;AAC/BG,IAAAA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAhB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,IAApB,EAA0B;AAC/BG,IAAAA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAhB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,IAApB,EAA0B;AAC/BG,IAAAA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAhB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,IAApB,EAA0B;AAC/BG,IAAAA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAhB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,IAApB,EAA0B;AAC/BG,IAAAA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAhB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,IAApB,EAA0B;AAC/BG,IAAAA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAhB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,IAApB,EAA0B;AAC/BG,IAAAA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAhB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,IAApB,EAA0B;AAC/BG,IAAAA,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAAhB;AACD,GAFM,MAEA;AACLD,IAAAA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAAhB;AACD,GAvBiF,CAyBlF;;;AACA,MAAIJ,WAAW,KAAK,IAApB,EAA0B;AACxBC,IAAAA,SAAS,GAAG,cAAZ;AACD,GA5BiF,CA8BlF;AACA;;;AACA,QAAMI,aAAa,GAAGT,MAAM,CAC1BG,IAAI,GAAG,IADmB,EAE1BE,SAF0B,EAG1B;AACEE,IAAAA,MAAM,EAAEA,MAAM,CAACG;AADjB,GAH0B,CAA5B;AAQA,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIV,WAAW,CAACK,QAAD,CAAf,EAA2B;AACzBK,IAAAA,MAAM,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,CAA8B,OAA9B,EAAuC;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAvC,EAAkEC,KAAlE,CAAwE,GAAxE,EAA6E,CAA7E,CAAT;AACD;;AAED,SAAQ,GAAEN,aAAc,IAAGE,MAAO,EAAlC;AACD,CA9CM","sourcesContent":["import { format } from 'date-fns'\nimport { isUndefined } from 'lodash'\n\nexport const poolFormat = (date, currentLang = 'en', formatStr = 'PP', noAbbrev) => {\n  let locale\n\n  if (currentLang === 'zh') {\n    locale = require('date-fns/locale/zh-CN')\n  } else if (currentLang === 'de') {\n    locale = require('date-fns/locale/de')\n  } else if (currentLang === 'es') {\n    locale = require('date-fns/locale/es')\n  } else if (currentLang === 'fr') {\n    locale = require('date-fns/locale/fr')\n  } else if (currentLang === 'it') {\n    locale = require('date-fns/locale/it')\n  } else if (currentLang === 'ja') {\n    locale = require('date-fns/locale/ja')\n  } else if (currentLang === 'hr') {\n    locale = require('date-fns/locale/hr')\n  } else if (currentLang === 'tr') {\n    locale = require('date-fns/locale/tr')\n  } else if (currentLang === 'ko') {\n    locale = require('date-fns/locale/ko')\n  } else {\n    locale = require('date-fns/locale/en-GB')\n  }\n\n  // our Spanish community rep asked for days to be before month names\n  if (currentLang === 'es') {\n    formatStr = 'do MMMM yyyy'\n  }\n  \n  // by providing a default string of 'PP' or any of its variants for `formatStr`\n  // it will format dates in whichever way is appropriate to the locale\n  const formattedDate = format(\n    date * 1000,\n    formatStr,\n    {\n      locale: locale.default\n    }\n  )\n\n  let abbrev = ''\n  if (isUndefined(noAbbrev)) {\n    abbrev = new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2]\n  }\n\n  return `${formattedDate} ${abbrev}`\n}\n"]},"metadata":{},"sourceType":"module"}