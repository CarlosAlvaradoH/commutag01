{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { request } from 'graphql-request';\nimport { POOLTOGETHER_GRAPH_URIS } from 'lib/constants';\nimport { prizeQuery } from 'lib/queries/prizeQuery';\nexport var getGraphLootBoxData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId, lootBoxAddress, tokenId, blockNumber) {\n    var variables, query, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            variables = {\n              lootBoxAddress: lootBoxAddress,\n              tokenId: tokenId\n            };\n            query = lootBoxQuery(blockNumber);\n            _context.prev = 2;\n            _context.next = 5;\n            return request(POOLTOGETHER_GRAPH_URIS[chainId], query, variables);\n\n          case 5:\n            data = _context.sent;\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(JSON.stringify(_context.t0, undefined, 2));\n\n          case 11:\n            return _context.abrupt(\"return\", data);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n\n  return function getGraphLootBoxData(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/fetchers/getGraphLootBoxData.js"],"names":["request","POOLTOGETHER_GRAPH_URIS","prizeQuery","getGraphLootBoxData","chainId","lootBoxAddress","tokenId","blockNumber","variables","query","lootBoxQuery","data","console","error","JSON","stringify","undefined"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAEA,SAASC,uBAAT,QAAwC,eAAxC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAEA,OAAO,IAAMC,mBAAmB;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,cAAhB,EAAgCC,OAAhC,EAAyCC,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,SAD2B,GACf;AAChBH,cAAAA,cAAc,EAAdA,cADgB;AAEhBC,cAAAA,OAAO,EAAPA;AAFgB,aADe;AAM3BG,YAAAA,KAN2B,GAMnBC,YAAY,CAACH,WAAD,CANO;AAAA;AAAA;AAAA,mBAUlBP,OAAO,CAClBC,uBAAuB,CAACG,OAAD,CADL,EAElBK,KAFkB,EAGlBD,SAHkB,CAVW;;AAAA;AAU/BG,YAAAA,IAV+B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgB/BC,YAAAA,OAAO,CAACC,KAAR,CAAcC,IAAI,CAACC,SAAL,cAAsBC,SAAtB,EAAiC,CAAjC,CAAd;;AAhB+B;AAAA,6CAmB1BL,IAnB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBR,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["import { request } from 'graphql-request'\n\nimport { POOLTOGETHER_GRAPH_URIS } from 'lib/constants'\nimport { prizeQuery } from 'lib/queries/prizeQuery'\n\nexport const getGraphLootBoxData = async (chainId, lootBoxAddress, tokenId, blockNumber) => {\n  const variables = {\n    lootBoxAddress,\n    tokenId,\n  }\n\n  const query = lootBoxQuery(blockNumber)\n\n  let data\n  try {\n    data = await request(\n      POOLTOGETHER_GRAPH_URIS[chainId],\n      query,\n      variables\n    )\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n  }\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}