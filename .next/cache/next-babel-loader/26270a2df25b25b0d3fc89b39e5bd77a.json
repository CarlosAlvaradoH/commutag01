{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { isEmpty } from 'lodash';\nimport { ethers } from 'ethers';\nimport { HISTORICAL_TOKEN_VALUES } from 'lib/constants';\nimport { extractPrizeNumberFromPrize } from 'lib/utils/extractPrizeNumberFromPrize';\nexport var compileHistoricalErc20Awards = function compileHistoricalErc20Awards(prize, uniswapPriceData) {\n  var prizeNumber = extractPrizeNumberFromPrize(prize);\n  var erc20GraphData = prize === null || prize === void 0 ? void 0 : prize.awardedExternalErc20Tokens;\n\n  if (isEmpty(erc20GraphData) || isEmpty(uniswapPriceData)) {\n    return {};\n  }\n\n  var data = {};\n  erc20GraphData.forEach(function (obj) {\n    var _HISTORICAL_TOKEN_VAL, _HISTORICAL_TOKEN_VAL2;\n\n    var priceData = uniswapPriceData[obj.address];\n    var priceUSD = (_HISTORICAL_TOKEN_VAL = HISTORICAL_TOKEN_VALUES['prizeNumber']) === null || _HISTORICAL_TOKEN_VAL === void 0 ? void 0 : (_HISTORICAL_TOKEN_VAL2 = _HISTORICAL_TOKEN_VAL[prizeNumber]) === null || _HISTORICAL_TOKEN_VAL2 === void 0 ? void 0 : _HISTORICAL_TOKEN_VAL2[obj.address];\n\n    if (!priceUSD) {\n      priceUSD = priceData === null || priceData === void 0 ? void 0 : priceData.usd;\n    }\n\n    var balanceAwardedBN = ethers.utils.bigNumberify(obj.balanceAwarded);\n    var balanceFormatted = ethers.utils.formatUnits(obj.balanceAwarded, parseInt(obj.decimals, 10));\n    var value = priceUSD && parseFloat(balanceFormatted) * priceUSD;\n    data[obj.address] = _objectSpread(_objectSpread(_objectSpread({}, obj), priceData), {}, {\n      balanceAwardedBN: balanceAwardedBN,\n      value: value\n    });\n  });\n  return data;\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/services/compileHistoricalErc20Awards.jsx"],"names":["isEmpty","ethers","HISTORICAL_TOKEN_VALUES","extractPrizeNumberFromPrize","compileHistoricalErc20Awards","prize","uniswapPriceData","prizeNumber","erc20GraphData","awardedExternalErc20Tokens","data","forEach","obj","priceData","address","priceUSD","usd","balanceAwardedBN","utils","bigNumberify","balanceAwarded","balanceFormatted","formatUnits","parseInt","decimals","value","parseFloat"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,SAASC,uBAAT,QAAwC,eAAxC;AACA,SAASC,2BAAT,QAA4C,uCAA5C;AAEA,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACC,KAAD,EAAQC,gBAAR,EAA6B;AACvE,MAAMC,WAAW,GAAGJ,2BAA2B,CAACE,KAAD,CAA/C;AACA,MAAMG,cAAc,GAAGH,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEI,0BAA9B;;AAEA,MACET,OAAO,CAACQ,cAAD,CAAP,IACAR,OAAO,CAACM,gBAAD,CAFT,EAGE;AACA,WAAO,EAAP;AACD;;AAED,MAAII,IAAI,GAAG,EAAX;AAEAF,EAAAA,cAAc,CAACG,OAAf,CAAuB,UAAAC,GAAG,EAAI;AAAA;;AAC5B,QAAMC,SAAS,GAAGP,gBAAgB,CAACM,GAAG,CAACE,OAAL,CAAlC;AAEA,QAAIC,QAAQ,4BAAGb,uBAAuB,CAAC,aAAD,CAA1B,oFAAG,sBAAyCK,WAAzC,CAAH,2DAAG,uBAAwDK,GAAG,CAACE,OAA5D,CAAf;;AACA,QAAI,CAACC,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAGF,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEG,GAAtB;AACD;;AAED,QAAMC,gBAAgB,GAAGhB,MAAM,CAACiB,KAAP,CAAaC,YAAb,CAA0BP,GAAG,CAACQ,cAA9B,CAAzB;AACA,QAAMC,gBAAgB,GAAGpB,MAAM,CAACiB,KAAP,CAAaI,WAAb,CAAyBV,GAAG,CAACQ,cAA7B,EAA6CG,QAAQ,CAACX,GAAG,CAACY,QAAL,EAAe,EAAf,CAArD,CAAzB;AAEA,QAAMC,KAAK,GAAGV,QAAQ,IAAIW,UAAU,CAACL,gBAAD,CAAV,GAA+BN,QAAzD;AAEAL,IAAAA,IAAI,CAACE,GAAG,CAACE,OAAL,CAAJ,iDACKF,GADL,GAEKC,SAFL;AAGEI,MAAAA,gBAAgB,EAAhBA,gBAHF;AAIEQ,MAAAA,KAAK,EAALA;AAJF;AAMD,GAnBD;AAqBA,SAAOf,IAAP;AACD,CAnCM","sourcesContent":["import { isEmpty } from 'lodash'\nimport { ethers } from 'ethers'\n\nimport { HISTORICAL_TOKEN_VALUES } from 'lib/constants'\nimport { extractPrizeNumberFromPrize } from 'lib/utils/extractPrizeNumberFromPrize'\n\nexport const compileHistoricalErc20Awards = (prize, uniswapPriceData) => {\n  const prizeNumber = extractPrizeNumberFromPrize(prize)\n  const erc20GraphData = prize?.awardedExternalErc20Tokens\n\n  if (\n    isEmpty(erc20GraphData) ||\n    isEmpty(uniswapPriceData)\n  ) {\n    return {}\n  }\n\n  let data = {}\n\n  erc20GraphData.forEach(obj => {\n    const priceData = uniswapPriceData[obj.address]\n\n    let priceUSD = HISTORICAL_TOKEN_VALUES['prizeNumber']?.[prizeNumber]?.[obj.address]\n    if (!priceUSD) {\n      priceUSD = priceData?.usd\n    }\n\n    const balanceAwardedBN = ethers.utils.bigNumberify(obj.balanceAwarded)\n    const balanceFormatted = ethers.utils.formatUnits(obj.balanceAwarded, parseInt(obj.decimals, 10))\n\n    const value = priceUSD && parseFloat(balanceFormatted) * priceUSD\n\n    data[obj.address] = {\n      ...obj,\n      ...priceData,\n      balanceAwardedBN,\n      value\n    }\n  })\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}