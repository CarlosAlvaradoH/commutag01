{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { getPoolData } from 'lib/fetchers/getPoolData';\nexport function useTimeTravelPoolQuery(pauseQueries, chainId, poolAddress, blockNumber) {\n  _s();\n\n  if (!blockNumber) {\n    blockNumber = -1;\n  }\n\n  var refetchInterval = !pauseQueries && blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.poolQuery, chainId, poolAddress, blockNumber], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", getPoolData(chainId, poolAddress, blockNumber));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !pauseQueries && chainId && poolAddress && blockNumber,\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(useTimeTravelPoolQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useTimeTravelPoolQuery.js"],"names":["useQuery","MAINNET_POLLING_INTERVAL","QUERY_KEYS","getPoolData","useTimeTravelPoolQuery","pauseQueries","chainId","poolAddress","blockNumber","refetchInterval","poolQuery","enabled"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,WAAT,QAA4B,0BAA5B;AAEA,OAAO,SAASC,sBAAT,CAAgCC,YAAhC,EAA8CC,OAA9C,EAAuDC,WAAvD,EAAoEC,WAApE,EAAiF;AAAA;;AACtF,MAAI,CAACA,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAG,CAAC,CAAf;AACD;;AAED,MAAMC,eAAe,GAAG,CAACJ,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBP,wBADsB,GAEtB,KAFF;AAIA,SAAOD,QAAQ,CACb,CAACE,UAAU,CAACQ,SAAZ,EAAuBJ,OAAvB,EAAgCC,WAAhC,EAA6CC,WAA7C,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAqBL,WAAW,CAACG,OAAD,EAAUC,WAAV,EAAuBC,WAAvB,CAAhC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEG,IAAAA,OAAO,EAAE,CAACN,YAAD,IAAiBC,OAAjB,IAA4BC,WAA5B,IAA2CC,WADtD;AAEEC,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GAjBeL,sB;UASPJ,Q","sourcesContent":["import { useQuery } from 'react-query'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { getPoolData } from 'lib/fetchers/getPoolData'\n\nexport function useTimeTravelPoolQuery(pauseQueries, chainId, poolAddress, blockNumber) {\n  if (!blockNumber) {\n    blockNumber = -1\n  }\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.poolQuery, chainId, poolAddress, blockNumber],\n    async () => { return getPoolData(chainId, poolAddress, blockNumber) },\n    { \n      enabled: !pauseQueries && chainId && poolAddress && blockNumber,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}